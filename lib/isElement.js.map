{"version":3,"file":"isElement.js","sources":["../isElement.js","../utils/getWindow.js","../isWindow.js"],"sourcesContent":["import getWindow from './utils/getWindow'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 Element 实例。\r\n * ========================================================================\r\n * @method isElement\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 Element 实例，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n * const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\n *\r\n * Types.isElement(svgElement) // -> true\r\n * Types.isHTMLElement(svgElement) // -> false\r\n *\r\n * isElement($list) // -> true\r\n *\r\n * isElement($div) // -> true\r\n *\r\n * isElement($text) // -> false\r\n *\r\n * isElement($items) // -> false\r\n *\r\n * isElement($fragment) // -> false\r\n *\r\n * isElement([]) // -> false\r\n */\r\nconst isElement = (val) => {\r\n  return val instanceof getWindow(val).Element\r\n}\r\n\r\nexport default isElement\r\n","import isWindow from '../isWindow'\r\n\r\nconst getWindow = (node) => {\r\n  if (node == null) {\r\n    return window\r\n  }\r\n\r\n  if (!isWindow(node)) {\r\n    const ownerDocument = node.ownerDocument\r\n    return ownerDocument ? ownerDocument.defaultView || window : window\r\n  }\r\n\r\n  return node\r\n}\r\n\r\nexport default getWindow\r\n","/**\r\n * 检测测试数据是否为 Window 对象\r\n * ========================================================================\r\n * @method isWindow\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 Window 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n *\r\n * Types.is($list) // -> 'element'\r\n * Types.isWindow($list) // -> false\r\n *\r\n * Types.isWindow(window) // -> true\r\n *\r\n * const nonWindowObject = {\r\n *   // 模拟部分 Window 对象的属性，但不完整\r\n *   document: {},\r\n *   location: {},\r\n *   // 缺少 alert 和 setInterval 属性\r\n * }\r\n *\r\n * Types.isWindow(nonWindowObject) // -> false\r\n *\r\n * Types.isWindow(null) // -> false\r\n */\r\nconst isWindow = (val) => {\r\n  return !!(val && val.document && val.location && val.alert && val.setInterval)\r\n}\r\n\r\nexport default isWindow\r\n"],"names":["val","node","window","document","location","alert","setInterval","ownerDocument","defaultView","getWindow","Element"],"mappings":"iPAkCmBA,GACVA,YCjCS,CAACC,IACjB,GAAY,MAARA,EACF,OAAOC,OAGT,MCqBgBF,EDrBFC,ICsBGD,EAAIG,UAAYH,EAAII,UAAYJ,EAAIK,OAASL,EAAIM,aDtB7C,CACnB,MAAMC,EAAgBN,EAAKM,cAC3B,OAAOA,GAAgBA,EAAcC,aAAwBN,MAC9D,CCkBc,IAACF,EDhBhB,OAAOC,GDuBeQ,CAAUT,GAAKU"}