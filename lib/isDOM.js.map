{"version":3,"file":"isDOM.js","sources":["../enum/types.js","../enum/objects.js","../utils/_type.js","../isObject.js","../isFunction.js","../isElement.js","../utils/getWindow.js","../isWindow.js","../isDOM.js","../isHTMLCollection.js","../isFragment.js","../isTextNode.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} - 返回检测数据类型的字符串\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import isFunction from './isFunction'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n *\r\n * // True\r\n * isObject({}) // => true\r\n * isObject(Object) // => true\r\n * isObject(new Object()) // => true\r\n * isObject(Object.create(null)) // => true\r\n * isObject([]) // => true\r\n * isObject(() => {}) // => true\r\n * isObject(class {}) // => true\r\n * isObject($list) // => true\r\n *\r\n * // False\r\n * isObject('null') // => false\r\n * isObject(1) // => false\r\n * isObject(false) // => false\r\n * isObject(Symbol('ok')) // => false\r\n * isObject($list) // => false\r\n *\r\n * // 针对 null，type.js 认为不是一个有效对象\r\n * // 以避免将 null 作为普通对象操作导致的错误\r\n * isObject(null) // => false\r\n */\r\nconst isObject = (val) => {\r\n  const type = typeof val\r\n\r\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\r\n}\r\n\r\nexport default isObject\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const blank = () => {}\r\n * const fn = new Function()\r\n *\r\n * function empty(){}\r\n *\r\n * isFunction(empty) // -> true\r\n * isFunction(blank) // -> true\r\n * isFunction(fn) // -> true\r\n * isFunction(parseInt) // -> true\r\n * isFunction(Array) // -> true\r\n * isFunction(Boolean) // -> true\r\n * isFunction(Date) // -> true\r\n * isFunction(Number) // -> true\r\n * isFunction(Object) // -> true\r\n * isFunction(RegExp) // -> true\r\n * isFunction(String) // -> true\r\n *\r\n * isFunction(Math) // -> false\r\n * isFunction(console) // -> false\r\n */\r\nconst isFunction = (val) => {\r\n  return _type(val) === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import getWindow from './utils/getWindow'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 Element 实例。\r\n * ========================================================================\r\n * @method isElement\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 Element 实例，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n * const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\n *\r\n * Types.isElement(svgElement) // -> true\r\n * Types.isHTMLElement(svgElement) // -> false\r\n *\r\n * isElement($list) // -> true\r\n *\r\n * isElement($div) // -> true\r\n *\r\n * isElement($text) // -> false\r\n *\r\n * isElement($items) // -> false\r\n *\r\n * isElement($fragment) // -> false\r\n *\r\n * isElement([]) // -> false\r\n */\r\nconst isElement = (val) => {\r\n  return val instanceof getWindow(val).Element\r\n}\r\n\r\nexport default isElement\r\n","import isWindow from '../isWindow'\r\n\r\nconst getWindow = (node) => {\r\n  if (node == null) {\r\n    return window\r\n  }\r\n\r\n  if (!isWindow(node)) {\r\n    const ownerDocument = node.ownerDocument\r\n    return ownerDocument ? ownerDocument.defaultView || window : window\r\n  }\r\n\r\n  return node\r\n}\r\n\r\nexport default getWindow\r\n","/**\r\n * 检测测试数据是否为 Window 对象\r\n * ========================================================================\r\n * @method isWindow\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 Window 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n *\r\n * Types.is($list) // -> 'element'\r\n * Types.isWindow($list) // -> false\r\n *\r\n * Types.isWindow(window) // -> true\r\n *\r\n * const nonWindowObject = {\r\n *   // 模拟部分 Window 对象的属性，但不完整\r\n *   document: {},\r\n *   location: {},\r\n *   // 缺少 alert 和 setInterval 属性\r\n * }\r\n *\r\n * Types.isWindow(nonWindowObject) // -> false\r\n *\r\n * Types.isWindow(null) // -> false\r\n */\r\nconst isWindow = (val) => {\r\n  return !!(val && val.document && val.location && val.alert && val.setInterval)\r\n}\r\n\r\nexport default isWindow\r\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\n/**\r\n * 检测测试数据是否为 Element 类型数据：Element 节点，TextNode，NodeList 和 DocumentFragment）。\r\n * ========================================================================\r\n * @method isDOM\r\n * @since 1.9.0\r\n * @category Element\r\n * @param {*} el\r\n * @returns {Boolean}\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $fragment = document.createDocumentFragment()\r\n * const $items = document.querySelectorAll('.item')\r\n * const $text = document.createTextNode('text')\r\n *\r\n * isDOM($list) // -> true\r\n *\r\n * isDOM($fragment) // -> true\r\n *\r\n * isDOM($items) // -> true\r\n *\r\n * isDOM($text) // -> true\r\n */\r\nconst isDOM = (el) => {\r\n  return (\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测数据的是否为 HTMLNodeList 对象\r\n * ========================================================================\r\n * @method isHTMLCollection\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 HTMLNodeList 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n *\r\n * isHTMLCollection($list) // -> false\r\n *\r\n * isHTMLCollection($div) // -> false\r\n *\r\n * isHTMLCollection($text) // -> false\r\n *\r\n * isHTMLCollection($items) // -> true\r\n *\r\n * isHTMLCollection($items) // -> false\r\n */\r\nconst isHTMLCollection = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.COLLECTION)\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 DocumentFragment 文档碎片。\r\n * ========================================================================\r\n * @method isFragment\r\n * @since 0.6.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 DocumentFragment 文档碎片，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n *\r\n * isFragment($list) // -> false\r\n *\r\n * isFragment($div) // -> false\r\n *\r\n * isFragment($text) // -> false\r\n *\r\n * isFragment($items) // -> false\r\n *\r\n * isFragment($items) // -> true\r\n */\r\nconst isFragment = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.FRAGMENT)\r\n}\r\n\r\nexport default isFragment\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为文本节点\r\n * ========================================================================\r\n * @method isTextNode\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是文本节点，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $fragment = document.createDocumentFragment()\r\n * const $items = document.querySelectorAll('.item')\r\n * const $text = document.createTextNode('text')\r\n *\r\n * isTextNode($list) // -> false\r\n *\r\n * isTextNode($div) // -> false\r\n *\r\n * isTextNode($fragment) // -> false\r\n *\r\n * isTextNode($items) // -> false\r\n *\r\n * isTextNode($text) // -> true\r\n */\r\nconst isTextNode = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.TEXT && val.nodeType === 3)\r\n}\r\n\r\nexport default isTextNode\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isObject","isFunction","isElement","node","window","document","location","alert","setInterval","ownerDocument","defaultView","getWindow","Element","el","isFragment","isTextNode"],"mappings":"sOACA,MAAMA,EAEK,SAFLA,EAGK,UAHLA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAgCI,SAhCJA,EAiCQ,aAjCRA,EAmCK,UAnCLA,EAqCM,WArCNA,EAsCM,WAtCNA,EAyCE,OCvCFC,EAAU,CAEd,gBDAM,OCEN,eDIK,MCHL,mBDIU,UCHV,eDIK,MCHL,mBDIU,UCFV,iBDIO,QCHP,qBDIW,YCFX,oBDIW,WCHX,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBD,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBDEM,OCDN,iBDGO,QCFP,4BAA6BA,EAC7B,oBAAqBA,EACrB,oBAAqBA,EACrB,mBDES,UCDT,kBDEQ,SCDR,gBAAiBA,GC9BbE,EAASC,IACb,MAAMC,EAAOC,OAAOC,UAAUC,SAASC,MAAML,GACvCM,SAAiBN,EACvB,IAAIO,EAGJ,GAAIP,GAAKQ,SAA4B,IAAjBR,EAAIS,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,GCVXS,EAAYV,MAGNA,UAFUA,IAEOH,ICNV,CAACG,GACXD,EAAMC,KAASH,EDKqBc,CAAWX,IELlDY,EAAaZ,GACVA,YCjCS,CAACa,IACjB,GAAY,MAARA,EACF,OAAOC,OAGT,MCqBgBd,EDrBFa,ICsBGb,EAAIe,UAAYf,EAAIgB,UAAYhB,EAAIiB,OAASjB,EAAIkB,aDtB7C,CACnB,MAAMC,EAAgBN,EAAKM,cAC3B,OAAOA,GAAgBA,EAAcC,aAAwBN,MAC9D,CCkBc,IAACd,EDhBhB,OAAOa,GDuBeQ,CAAUrB,GAAKsB,eGNxBC,IACb,OACEb,EAASa,KACRX,EAAUW,OCDHb,EADcV,EDEauB,ICDVxB,EAAMC,KAASH,ICDzB,CAACG,MACRU,EAASV,IAAQD,EAAMC,KAASH,GFCE2B,CAAWD,IGFtC,CAACvB,MACRU,EAASV,IAAQD,EAAMC,KAASH,GAA+B,IAAjBG,EAAIS,UHCEgB,CAAWF,ICFlD,IAACvB,CDGvB"}