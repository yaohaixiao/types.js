{"version":3,"file":"isPrototype.js","sources":["../enum/types.js","../enum/objects.js","../isFunction.js","../utils/_type.js","../isConstructor.js","../isNativeFunction.js","../isPrototype.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const blank = () => {}\r\n * const fn = new Function()\r\n *\r\n * function empty(){}\r\n *\r\n * isFunction(empty) // -> true\r\n * isFunction(blank) // -> true\r\n * isFunction(fn) // -> true\r\n * isFunction(parseInt) // -> true\r\n * isFunction(Array) // -> true\r\n * isFunction(Boolean) // -> true\r\n * isFunction(Date) // -> true\r\n * isFunction(Number) // -> true\r\n * isFunction(Object) // -> true\r\n * isFunction(RegExp) // -> true\r\n * isFunction(String) // -> true\r\n *\r\n * isFunction(Math) // -> false\r\n * isFunction(console) // -> false\r\n */\r\nconst isFunction = (val) => {\r\n  return _type(val) === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} - 返回检测数据类型的字符串\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import isFunction from './isFunction'\r\nimport isNativeFunction from './isNativeFunction'\r\n\r\n/**\r\n * 检测测试函数是否为构造函数\r\n * ========================================================================\r\n * @method isConstructor\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} fn - 要测试的（构造）函数\r\n * @returns {Boolean} - fn 是构造函数，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * const fn = function(){};\r\n * const ff = class {};\r\n * const callback = () => {}\r\n *\r\n * isConstructor(fn) // -> true\r\n * isConstructor(ff) // -> true\r\n * isConstructor(callback) // -> false\r\n * isConstructor(console.log) // -> false\r\n *\r\n * isConstructor(Math) // -> false\r\n * isConstructor(Boolean) // -> true\r\n * isConstructor(Array) // -> true\r\n * isConstructor(Function) // -> true\r\n * isConstructor(Date) // -> true\r\n * isConstructor(RegExp) // -> true\r\n * isConstructor(Object) // -> true\r\n * isConstructor(Promise) // -> true\r\n */\r\nconst isConstructor = (fn) => {\r\n  let proto = null\r\n  let constructor = null\r\n  let instance\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  proto = fn.prototype\r\n\r\n  if (!proto) {\r\n    return false\r\n  }\r\n\r\n  constructor = fn.constructor\r\n\r\n  if (\r\n    isNativeFunction(fn) &&\r\n    (constructor === fn || constructor === Function)\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  // 判断 fn 是否为 Promise 构造函数\r\n  instance = new fn()\r\n\r\n  // 判断 constructor\r\n  return (\r\n    (instance.constructor === fn && instance instanceof fn) ||\r\n    (instance.constructor === Object && instance instanceof Object)\r\n  )\r\n}\r\n\r\nexport default isConstructor\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试数据是否为 JavaScript 内置函数\r\n * ========================================================================\r\n * @method isNativeFunction\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - 要测试的函数\r\n * @returns {Boolean} - val 是内置函数，返回 true，否则返回 false;\r\n */\r\nconst isNativeFunction = (val) => {\r\n  return isFunction(val) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + val)\r\n}\r\n\r\nexport default isNativeFunction\r\n","import isConstructor from './isConstructor'\r\n\r\n/**\r\n * 判断是否为 prototype 对象\r\n * ========================================================================\r\n * @method isPrototype\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 prototype 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const Yao= {\r\n *   age: 40,\r\n *   career: 'programmer'\r\n * }\r\n *\r\n * const Programmer = function(name, age) {\r\n *   this.name = name\r\n *   this.age = age\r\n *   this.isDead = false\r\n *\r\n *   return this\r\n * }\r\n *\r\n * Programmer.prototype.career = 'programmer'\r\n * Programmer.prototype.getWorkDone = function() {\r\n *   this.isDead = true\r\n *   return this\r\n * }\r\n *\r\n * isPrototype(null) // => false\r\n *\r\n * isPrototype(Object) // => false\r\n * isPrototype(Object.prototype) // => true\r\n *\r\n * isPrototype(Programmer) // => false\r\n * isPrototype(Yao.__proto__) // => true\r\n */\r\nconst isPrototype = (val) => {\r\n  const OP = Object.prototype\r\n  const Ctor = val ? val.constructor : null\r\n  const proto = (isConstructor(Ctor) && Ctor.prototype) || OP\r\n\r\n  return val === proto\r\n}\r\n\r\nexport default isPrototype\r\n"],"names":["TYPES","OBJECTS","isFunction","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","_type","isConstructor","fn","instance","proto","constructor","test","Function","OP","Ctor"],"mappings":"4OACA,MAAMA,EAEK,SAFLA,EAGK,UAHLA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAgCI,SAhCJA,EAmCK,UAnCLA,EAsCM,WCpCNC,EAAU,CAEd,gBDAM,OCEN,eDIK,MCHL,mBDIU,UCHV,eDIK,MCHL,mBDIU,UCFV,iBDIO,QCHP,qBDIW,YCFX,oBDIW,WCHX,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBD,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBDEM,OCDN,iBDGO,QCFP,4BDGU,WCFV,oBAAqBA,EACrB,oBDHY,aCIZ,mBDES,UCDT,kBDEQ,SCDR,gBDEM,QETFE,EAAcC,GCvBN,CAACA,IACb,MAAMC,EAAOC,OAAOC,UAAUC,SAASC,MAAML,GACvCM,SAAiBN,EACvB,IAAIO,EAGJ,GAAIP,GAAKQ,SAA4B,IAAjBR,EAAIS,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,GDZRS,CAAMV,KAASH,EEHlBc,EAAiBC,IACrB,IAEIC,EAFAC,EAAQ,KACRC,EAAc,KAGlB,QAAKhB,EAAWa,KAIhBE,EAAQF,EAAGT,YAENW,IAILC,EAAcH,EAAGG,eClCVhB,EADiBC,EDsCLY,KCrCO,4BAA4BI,KAAK,GAAKhB,IDsC7De,IAAgBH,GAAMG,IAAgBE,YAMzCJ,EAAW,IAAID,EAIZC,EAASE,cAAgBH,GAAMC,aAAoBD,GACnDC,EAASE,cAAgBb,QAAUW,aAAoBX,UClDnC,IAACF,CDmDvB,SEvBkBA,IACnB,MAAMkB,EAAKhB,OAAOC,UACZgB,EAAOnB,EAAMA,EAAIe,YAAc,KAGrC,OAAOf,KAFQW,EAAcQ,IAASA,EAAKhB,WAAce,EAE1CJ"}