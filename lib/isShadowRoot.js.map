{"version":3,"file":"isShadowRoot.js","sources":["../isShadowRoot.js","../utils/getWindow.js","../isWindow.js"],"sourcesContent":["import getWindow from './utils/getWindow'\r\n\r\n/**\r\n * 检测测试数据是否为 ShadowRoot 对象\r\n * ========================================================================\r\n * @method isShadowRoot\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 ShadowRoot 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // 测试 ShadowRoot 未定义的情况\r\n * const originalShadowRoot = global.ShadowRoot\r\n *\r\n * // 临时将 ShadowRoot 设置为 undefined\r\n * global.ShadowRoot = undefined\r\n * isShadowRoot({}) // -> false\r\n *\r\n * // 恢复原始的 ShadowRoot\r\n * global.ShadowRoot = originalShadowRoot\r\n *\r\n * // 测试传入真正的 ShadowRoot 实例\r\n * const div = document.createElement('div')\r\n * const shadowRoot = div.attachShadow({ mode: 'open' })\r\n *\r\n * isShadowRoot(shadowRoot) // -> true\r\n *\r\n * // 测试传入非 ShadowRoot 实例\r\n * isShadowRoot({}) // -> false\r\n */\r\nconst isShadowRoot = (val) => {\r\n  if (typeof ShadowRoot === 'undefined') {\r\n    return false\r\n  }\r\n\r\n  const OwnElement = getWindow(val).ShadowRoot\r\n  return val instanceof OwnElement || val instanceof ShadowRoot\r\n}\r\n\r\nexport default isShadowRoot\r\n","import isWindow from '../isWindow'\r\n\r\nconst getWindow = (node) => {\r\n  if (node == null) {\r\n    return window\r\n  }\r\n\r\n  if (!isWindow(node)) {\r\n    const ownerDocument = node.ownerDocument\r\n    return ownerDocument ? ownerDocument.defaultView || window : window\r\n  }\r\n\r\n  return node\r\n}\r\n\r\nexport default getWindow\r\n","/**\r\n * 检测测试数据是否为 Window 对象\r\n * ========================================================================\r\n * @method isWindow\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 Window 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n *\r\n * Types.is($list) // -> 'element'\r\n * Types.isWindow($list) // -> false\r\n *\r\n * Types.isWindow(window) // -> true\r\n *\r\n * const nonWindowObject = {\r\n *   // 模拟部分 Window 对象的属性，但不完整\r\n *   document: {},\r\n *   location: {},\r\n *   // 缺少 alert 和 setInterval 属性\r\n * }\r\n *\r\n * Types.isWindow(nonWindowObject) // -> false\r\n *\r\n * Types.isWindow(null) // -> false\r\n */\r\nconst isWindow = (val) => {\r\n  return !!(val && val.document && val.location && val.alert && val.setInterval)\r\n}\r\n\r\nexport default isWindow\r\n"],"names":["val","ShadowRoot","OwnElement","node","window","document","location","alert","setInterval","ownerDocument","defaultView","getWindow"],"mappings":"oPA+BsBA,IACpB,GAA0B,oBAAfC,WACT,OAAO,EAGT,MAAMC,EClCU,CAACC,IACjB,GAAY,MAARA,EACF,OAAOC,OAGT,MCqBgBJ,EDrBFG,ICsBGH,EAAIK,UAAYL,EAAIM,UAAYN,EAAIO,OAASP,EAAIQ,aDtB7C,CACnB,MAAMC,EAAgBN,EAAKM,cAC3B,OAAOA,GAAgBA,EAAcC,aAAwBN,MAC9D,CCkBc,IAACJ,EDhBhB,OAAOG,GDwBYQ,CAAUX,GAAKC,WAClC,OAAOD,aAAeE,GAAcF,aAAeC"}