{"version":3,"file":"isBinary.js","sources":["../isBuffer.js","../enum/types.js","../enum/objects.js","../isString.js","../utils/_type.js","../isBinary.js"],"sourcesContent":["/**\r\n * 验证数据是否为 Buffer 类型\r\n * ========================================================================\r\n * @method isBuffer\r\n * @since 1.6.0\r\n * @category Object\r\n * @param {*} val - 待检测的数据\r\n * @returns {Boolean} 'val' 是 Buffer 类型返回 true，否则返回 false\r\n * @example\r\n *\r\n * const buffer = Buffer.alloc(15)\r\n *\r\n * isBuffer(new ArrayBuffer(8)) // -> false\r\n * isBuffer(new Uint8Array(2)) // -> false\r\n *\r\n * isBuffer(buffer) // -> true\r\n */\r\nconst isBuffer = (val) => {\r\n  return Buffer ? Buffer.isBuffer(val) : false\r\n}\r\n\r\nexport default isBuffer\r\n","// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n * ========================================================================\r\n * @method isString\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const text = document.createTextNode('text')\r\n *\r\n * isString('') // -> true\r\n * isString(String(2)) // -> true\r\n * isString(2 + '0') // -> true\r\n *\r\n * isString(2) // -> false\r\n * isString(new String()) // -> false\r\n * isString(text) // -> false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} - 返回检测数据类型的字符串\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import isBuffer from './isBuffer'\r\nimport isString from './isString'\r\n\r\n/**\r\n * isBinary(val) 方法用来检测测试数据是二进制（字符串）数据。\r\n * ========================================================================\r\n * @method isBinary\r\n * @since 1.11.0\r\n * @param {*} buffer\r\n * @returns {Boolean}\r\n * @example\r\n *\r\n * const buffer = Buffer.alloc(15)\r\n *\r\n * isBinary('Z29vZA==') // -> false\r\n * isBinary(isArrayBuffer(8)) // -> false\r\n *\r\n * isBinary(buffer) // -> true\r\n * isBinary(buffer.toString()) // -> true\r\n */\r\nconst isBinary = (buffer) => {\r\n  let i\r\n\r\n  if (!isBuffer(buffer) && !isString(buffer)) {\r\n    return false\r\n  }\r\n\r\n  for (i = 0; i < 24; i += 1) {\r\n    const charCode = isBuffer(buffer) ? buffer[i] : buffer.charCodeAt(i)\r\n\r\n    if (charCode === 65533 || charCode <= 8) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport default isBinary\r\n"],"names":["isBuffer","val","Buffer","TYPES","OBJECTS","isString","obj","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","_type","buffer","i","charCode","charCodeAt"],"mappings":"yOAiBA,MAAMA,EAAYC,KACTC,QAASA,OAAOF,SAASC,GCjB5BE,EAEK,SAFLA,EAGK,UAHLA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAgCI,SAhCJA,EAmCK,UCjCLC,EAAU,CAEd,gBDAM,OCEN,eDIK,MCHL,mBDIU,UCHV,eDIK,MCHL,mBDIU,UCFV,iBDIO,QCHP,qBDIW,YCFX,oBDIW,WCHX,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBD,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBDEM,OCDN,iBDGO,QCFP,4BDGU,WCFV,oBDGU,WCFV,oBDHY,aCIZ,mBDES,UCDT,kBDEQ,SCDR,gBDEM,QEnBFE,EAAYC,GCbJ,CAACL,IACb,MAAMM,EAAOC,OAAOC,UAAUC,SAASC,MAAMV,GACvCW,SAAiBX,EACvB,IAAIY,EAGJ,GAAIZ,GAAKa,SAA4B,IAAjBb,EAAIc,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,GDtBRS,CAAMV,KAASH,SEJNc,IAChB,IAAIC,EAEJ,IAAKlB,EAASiB,KAAYZ,EAASY,GACjC,OAAO,EAGT,IAAKC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC1B,MAAMC,EAAWnB,EAASiB,GAAUA,EAAOC,GAAKD,EAAOG,WAAWF,GAElE,GAAiB,QAAbC,GAAsBA,GAAY,EACpC,OAAO,CAEV,CAED,OAAO"}