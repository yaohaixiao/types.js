{"version":3,"file":"isEmpty.js","sources":["../enum/types.js","../enum/objects.js","../utils/_type.js","../isObject.js","../isFunction.js","../isEmptyArray.js","../isArray.js","../isObjectLike.js","../utils/hasOwn.js","../isUndefined.js","../isEmptyObject.js","../isPlainObject.js","../isEmptyArguments.js","../isArguments.js","../isEmpty.js","../isNull.js","../isString.js","../isHTMLCollection.js","../isBuffer.js","../isTypedArray.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} - 返回检测数据类型的字符串\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import isFunction from './isFunction'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n *\r\n * // True\r\n * isObject({}) // => true\r\n * isObject(Object) // => true\r\n * isObject(new Object()) // => true\r\n * isObject(Object.create(null)) // => true\r\n * isObject([]) // => true\r\n * isObject(() => {}) // => true\r\n * isObject(class {}) // => true\r\n * isObject($list) // => true\r\n *\r\n * // False\r\n * isObject('null') // => false\r\n * isObject(1) // => false\r\n * isObject(false) // => false\r\n * isObject(Symbol('ok')) // => false\r\n * isObject($list) // => false\r\n *\r\n * // 针对 null，type.js 认为不是一个有效对象\r\n * // 以避免将 null 作为普通对象操作导致的错误\r\n * isObject(null) // => false\r\n */\r\nconst isObject = (val) => {\r\n  const type = typeof val\r\n\r\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\r\n}\r\n\r\nexport default isObject\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const blank = () => {}\r\n * const fn = new Function()\r\n *\r\n * function empty(){}\r\n *\r\n * isFunction(empty) // -> true\r\n * isFunction(blank) // -> true\r\n * isFunction(fn) // -> true\r\n * isFunction(parseInt) // -> true\r\n * isFunction(Array) // -> true\r\n * isFunction(Boolean) // -> true\r\n * isFunction(Date) // -> true\r\n * isFunction(Number) // -> true\r\n * isFunction(Object) // -> true\r\n * isFunction(RegExp) // -> true\r\n * isFunction(String) // -> true\r\n *\r\n * isFunction(Math) // -> false\r\n * isFunction(console) // -> false\r\n */\r\nconst isFunction = (val) => {\r\n  return _type(val) === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import isArray from './isArray'\r\n\r\n/**\r\n * 检测测试数据是否为空字数组\r\n * ========================================================================\r\n * @method isEmptyArray\r\n * @since 0.6.0\r\n * @category Array\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是空数组，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmptyArray(new Int8Array([]) // -> false\r\n *\r\n * isEmptyArray([]) // -> true\r\n *\r\n * isEmptyArray(new Array) // -> true\r\n *\r\n * isEmptyArray([1]) // -> false\r\n */\r\nconst isEmptyArray = (val) => {\r\n  return isArray(val) && val.length === 0\r\n}\r\n\r\nexport default isEmptyArray\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @since 0.2.0\r\n * @category Array\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是 Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isArray([]) // -> true\r\n * isArray(new Array()) // -> true\r\n * isArray('type.js'.split('')) // -> true\r\n *\r\n * // False\r\n * // 虽然  arguments 对象看起来也像数组，但是它也不是数组\r\n * isArray(args) // -> false\r\n * // 虽然 HTMLNodeList 的看起来像数组，但它并不是数组\r\n * isArray(document.getElementsByTagName('li')) // -> false\r\n * isArray(LooksLike) // -> false\r\n * isArray(new Int8Array()) // -> false\r\n */\r\nconst isArray = (val) => {\r\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\r\n}\r\n\r\nexport default isArray\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测测试数据是否为类似 Object 类型\r\n * ========================================================================\r\n * @method isObjectLike\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是类似 Object 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isObjectLike(function empty(){}) // -> true\r\n * isObjectLike({}) // -> true\r\n * isObjectLike(Object.create(null)) // -> true\r\n * isObjectLike(Object.create({})) // -> true\r\n * isObjectLike(new Function()) // -> true\r\n *\r\n * // False\r\n * isObjectLike([]) // -> false\r\n * isObjectLike(null) // -> false\r\n * isObjectLike(document.getElementById('wrap')) // -> fal\r\n */\r\nconst isObjectLike = (val) => {\r\n  return isObject(val) && val !== null\r\n}\r\n\r\nexport default isObjectLike\r\n","import isUndefined from '../isUndefined'\r\n\r\n/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n\r\n  if (hasOwnProperty) {\r\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\r\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\r\n    return hasOwnProperty.call(obj, prop)\r\n  }\r\n\r\n  return (\r\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\r\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\r\n  )\r\n}\r\n\r\nexport default hasOwn\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 undefined（未定义），返回 true，否则返回 false\r\n * @example\r\n *\r\n * let projects\r\n *\r\n * isUndefined(projects) // -> true\r\n *\r\n * isUndefined([]) // -> false\r\n * isUndefined('') // -> false\r\n * isUndefined(0) // -> false\r\n * isUndefined(NaN) // -> false\r\n * isUndefined({}) // -> false\r\n * isUndefined(null) // -> false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import isPlainObject from './isPlainObject'\r\nimport hasOwn from './utils/hasOwn'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isEmptyObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是空对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * function Person(name,age){\r\n *    this.name = name;\r\n *    this.age = age;\r\n * }\r\n *\r\n * isEmptyObject({}) // -> true\r\n * isEmptyObject([]) // true\r\n * isEmptyObject(Person) // true\r\n * isEmptyObject(new Object()) // true\r\n * isEmptyObject(new Boolean()) // true\r\n * isEmptyObject(new Array()) // true\r\n * isEmptyObject(new Date('2017-12-11')) // true\r\n * isEmptyObject(new RegExp('\\s+','ig')) // true\r\n * isEmptyObject(new String()) // true\r\n *\r\n * isEmptyObject(new Function()) // false\r\n * isEmptyObject(['']) // false\r\n * isEmptyObject(null) // false\r\n * isEmptyObject({name:'type.js'}) // -> false\r\n * isEmptyObject(new Person('yaohaixiao',30)) // false\r\n */\r\nconst isEmptyObject = (obj) => {\r\n  let prop\r\n\r\n  if (!isPlainObject(obj)) {\r\n    return false\r\n  }\r\n\r\n  for (prop in obj) {\r\n    /* istanbul ignore else */\r\n    if (hasOwn(obj, prop)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default isEmptyObject\r\n","import isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为普通对象\r\n * ========================================================================\r\n * @method isPlainObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * let udf\r\n *\r\n * // 基础类型\r\n * isPlainObject(2) // -> false\r\n * isPlainObject('str') // -> false\r\n * isPlainObject(false) // -> false\r\n * isPlainObject(null) // -> false\r\n * isPlainObject(udf) // -> false\r\n *\r\n * // 引用类型\r\n * isPlainObject(new Function()) // -> false\r\n * isPlainObject(function(){}) // -> false\r\n * isPlainObject(() => {}) // -> false\r\n * isPlainObject(class{}) // -> false\r\n *\r\n * isPlainObject(new class{}) // -> true\r\n * isPlainObject({}) // -> true\r\n * isPlainObject(Object.create(null)) // -> true\r\n * isPlainObject(new Object()) // -> true\r\n * isPlainObject([]) // -> true\r\n * isPlainObject(/s+/ig) // -> true\r\n * isPlainObject(new String()) // -> true\r\n * isPlainObject(new Number()) // -> true\r\n * isPlainObject(new Boolean()) // -> true\r\n * isPlainObject(new Array()) // -> true\r\n * isPlainObject(new Date()) // -> true\r\n */\r\nconst isPlainObject = (val) => {\r\n  const getPrototypeOf = Object.getPrototypeOf\r\n  let proto\r\n\r\n  // Detect obvious negatives\r\n  if (!isObjectLike(val)) {\r\n    return false\r\n  }\r\n\r\n  proto = val.prototype\r\n\r\n  // JavaScript 对象分为两种：普通对象和函数对象\r\n  // 普通对象：原型是 __proto__，没有 prototype 原型（属性）\r\n  // 函数对象：原型是 prototype ，prototype 只存在于函数对象上\r\n  if (!proto) {\r\n    return true\r\n  }\r\n\r\n  proto = val\r\n\r\n  while (getPrototypeOf(proto) !== null) {\r\n    proto = getPrototypeOf(proto)\r\n  }\r\n\r\n  return getPrototypeOf(val) === proto\r\n}\r\n\r\nexport default isPlainObject\r\n","import isArguments from './isArguments'\r\n\r\n/**\r\n * 检测测试 arguments 对象长度为 0\r\n * ========================================================================\r\n * @method isEmptyArguments\r\n * @since 2.6.0\r\n * @category Arguments\r\n * @param {*} val - val 待检测的数据。\r\n * @returns {Boolean} true - 表示检测 arguments 对象长度为 0，false 则表示不是。\r\n * @example\r\n *\r\n * let args\r\n * const fn = function () {arg = arguments}\r\n *\r\n * fn()\r\n *\r\n * isEmptyArguments(args) // -> true\r\n *\r\n * fn(1)\r\n *\r\n * isEmptyArguments(args) // -> false\r\n */\r\nconst isEmptyArguments = (val) => {\r\n  return isArguments(val) && val.length === 0\r\n}\r\n\r\nexport default isEmptyArguments\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\nimport isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为 arguments 对象\r\n * ========================================================================\r\n * @method isArguments\r\n * @since 0.2.0\r\n * @category Arguments\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} ‘val’ 是 Arguments 对象，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * const argsLike = { '0': 3, '1': 4, length: 2 }\r\n * const $items = document.querySelectorAll('.item')\r\n * let args\r\n *\r\n * function sum(a, b){\r\n *   args = arguments\r\n *\r\n *   return a + b\r\n * }\r\n *\r\n * sum(3, 5)\r\n *\r\n * isArguments(argsLike) // -> false\r\n * isArguments([]) // -> false\r\n * isArguments(items) // -> false\r\n *\r\n * is(args) // -> 'arguments'\r\n * isArguments(args) // -> true\r\n */\r\nconst isArguments = (val) => {\r\n  return isObjectLike(val) && _type(val) === TYPES.ARGUMENTS\r\n}\r\n\r\nexport default isArguments\r\n","import isString from './isString'\r\nimport isNull from './isNull'\r\nimport isBuffer from './isBuffer'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isTypedArray from './isTypedArray'\r\nimport isEmptyArray from './isEmptyArray'\r\nimport isEmptyObject from './isEmptyObject'\r\nimport isEmptyArguments from './isEmptyArguments'\r\n\r\n/**\r\n * 检测测试数据是否为空字符串、数组、对象或者空的 arguments 参数\r\n * ========================================================================\r\n * @method isEmpty\r\n * @since 0.2.0\r\n * @category Base\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是空值（空字符串、空对象、空数组等），返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmpty(null);\r\n *\r\n * // 字符串\r\n * isEmpty('') // -> true\r\n * isEmpty(String()) // -> true\r\n * isEmpty(' ') // -> false\r\n *\r\n * // 数组\r\n * isEmpty([]) // -> true\r\n * isEmpty([1]) // -> false\r\n *\r\n * // 对象\r\n * isEmpty(new String()) // -> true\r\n * isEmpty({}) // -> true\r\n * isEmpty({a: 1}) // -> false\r\n *\r\n * // Prototype 对象\r\n * let args\r\n * const fn = function () {arg = arguments}\r\n *\r\n * fn()\r\n *\r\n * isEmpty(fn.prototype) // -> false\r\n *\r\n * // arguments 参数\r\n * isEmpty(args) // -> true\r\n *\r\n * fn(1)\r\n *\r\n * isEmpty(args) // -> false\r\n *\r\n * // buffer\r\n * left buffer = Buffer.alloc(0)\r\n *\r\n * isEmpty(buffer) => true\r\n *\r\n * buffer = Buffer.alloc(10)\r\n *\r\n * isEmpty(buffer) => false\r\n */\r\nconst isEmpty = (val) => {\r\n  return (\r\n    isNull(val) ||\r\n    (isString(val) && val === '') ||\r\n    ((isHTMLCollection(val) || isBuffer(val) || isTypedArray(val)) &&\r\n      !val.length) ||\r\n    isEmptyArguments(val) ||\r\n    isEmptyObject(val) ||\r\n    isEmptyArray(val)\r\n  )\r\n}\r\n\r\nexport default isEmpty\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 null\r\n * ========================================================================\r\n * @method isNull\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 null，返回 true，否则返回 false\r\n * @example\r\n *\r\n * let project\r\n *\r\n * isNull('') // -> false\r\n * isNull({}) // -> false\r\n * isNull(project) // -> false\r\n * isNull(0) // -> false\r\n * isNull(false) // -> false\r\n * isNull(Object.create(null)) // -> false\r\n *\r\n * isNull(null) // -> true\r\n */\r\nconst isNull = (val) => {\r\n  return _type(val) === TYPES.NULL\r\n}\r\n\r\nexport default isNull\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n * ========================================================================\r\n * @method isString\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const text = document.createTextNode('text')\r\n *\r\n * isString('') // -> true\r\n * isString(String(2)) // -> true\r\n * isString(2 + '0') // -> true\r\n *\r\n * isString(2) // -> false\r\n * isString(new String()) // -> false\r\n * isString(text) // -> false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测数据的是否为 HTMLNodeList 对象\r\n * ========================================================================\r\n * @method isHTMLCollection\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 HTMLNodeList 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n *\r\n * isHTMLCollection($list) // -> false\r\n *\r\n * isHTMLCollection($div) // -> false\r\n *\r\n * isHTMLCollection($text) // -> false\r\n *\r\n * isHTMLCollection($items) // -> true\r\n *\r\n * isHTMLCollection($items) // -> false\r\n */\r\nconst isHTMLCollection = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.COLLECTION)\r\n}\r\n\r\nexport default isHTMLCollection\r\n","/**\r\n * 验证数据是否为 Buffer 类型\r\n * ========================================================================\r\n * @method isBuffer\r\n * @since 1.6.0\r\n * @category Object\r\n * @param {*} val - 待检测的数据\r\n * @returns {Boolean} 'val' 是 Buffer 类型返回 true，否则返回 false\r\n * @example\r\n *\r\n * const buffer = Buffer.alloc(15)\r\n *\r\n * isBuffer(new ArrayBuffer(8)) // -> false\r\n * isBuffer(new Uint8Array(2)) // -> false\r\n *\r\n * isBuffer(buffer) // -> true\r\n */\r\nconst isBuffer = (val) => {\r\n  return Buffer ? Buffer.isBuffer(val) : false\r\n}\r\n\r\nexport default isBuffer\r\n","import _type from './utils/_type'\r\n/**\r\n * 检测测试数据是否为 TypedArray 类型\r\n * ========================================================================\r\n * @method isTypedArray\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 type arrays 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(str) {\r\n *   args = arguments\r\n *   return str\r\n * }\r\n *\r\n * test('str')\r\n *\r\n * isTypedArray( args ) // -> false\r\n * isTypedArray( numbers ) // -> false\r\n * isTypedArray( new Array() ) // -> false\r\n *\r\n * isTypedArray(new Int8Array([])) // -> true\r\n * isTypedArray(new Int16Array([])) // -> true\r\n * isTypedArray(new Int32Array([])) // -> true\r\n *\r\n * isTypedArray(new Uint8ClampedArray([])) // -> true\r\n * isTypedArray(new Uint8Array([])) // -> true\r\n * isTypedArray(new Uint16Array([])) // -> true\r\n * isTypedArray(new Uint32Array([])) // -> true\r\n *\r\n * isTypedArray(new Float32Array([])) // -> true\r\n * isTypedArray(new Float64Array([])) // -> true\r\n *\r\n * isTypedArray(new BigInt64Array(42)) // -> true\r\n * isTypedArray(new BigUint64Array(42)) // -> true\r\n */\r\nconst isTypedArray = (val) => {\r\n  const type = _type(val)\r\n  const isTyped =\r\n    /^(?:Float(?:32|64)|(Int|Uint)(?:8|16|32)|Uint8Clamped|Big(Int|Uint)64)Array$/i\r\n  return isTyped.test(type)\r\n}\r\n\r\nexport default isTypedArray\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isObject","isFunction","isEmptyArray","Array","isArray","length","isObjectLike","hasOwn","obj","prop","hasOwnProperty","call","constructor","isEmptyObject","getPrototypeOf","proto","isPlainObject","isEmptyArguments","isArguments","isNull","isHTMLCollection","Buffer","isBuffer","test","isTypedArray"],"mappings":"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"}