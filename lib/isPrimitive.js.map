{"version":3,"file":"isPrimitive.js","sources":["../enum/types.js","../enum/objects.js","../utils/_type.js","../isPrimitive.js","../isString.js","../isNumber.js","../isNull.js","../isBoolean.js","../isUndefined.js","../isSymbol.js","../isBigInt.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} - 返回检测数据类型的字符串\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import isBoolean from './isBoolean'\r\nimport isString from './isString'\r\nimport isNumber from './isNumber'\r\nimport isNull from './isNull'\r\nimport isUndefined from './isUndefined'\r\nimport isSymbol from './isSymbol'\r\nimport isBigInt from './isBigInt'\r\n\r\n/**\r\n * 检测测试数据是否为原始值类型\r\n * ========================================================================\r\n * @method isPrimitive\r\n * @since 2.6.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是原始值类型，返回 true，否则返回 false\r\n * @exammple\r\n *\r\n * let num\r\n * const MAX_SAFE_INTEGER = 9007199254740991\r\n * const bigint = BigInt(MAX_SAFE_INTEGER + 1)\r\n *\r\n * // True\r\n * isPrimitive(1) // -> true\r\n * isPrimitive('num') // -> true\r\n * isPrimitive(false) // -> true\r\n * isPrimitive(null) // -> true\r\n * isPrimitive(num) // -> true\r\n * isPrimitive(Symbol('foo')) // -> true\r\n * isPrimitive(bigint) // -> true\r\n *\r\n * // False\r\n * isPrimitive([]) // -> false\r\n * isPrimitive({}) // -> false\r\n * isPrimitive(()=>{}) // -> false\r\n */\r\nconst isPrimitive = (val) => {\r\n  return (\r\n    isString(val) ||\r\n    isNumber(val) ||\r\n    isNull(val) ||\r\n    isBoolean(val) ||\r\n    isUndefined(val) ||\r\n    isSymbol(val) ||\r\n    isBigInt(val)\r\n  )\r\n}\r\n\r\nexport default isPrimitive\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n * ========================================================================\r\n * @method isString\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const text = document.createTextNode('text')\r\n *\r\n * isString('') // -> true\r\n * isString(String(2)) // -> true\r\n * isString(2 + '0') // -> true\r\n *\r\n * isString(2) // -> false\r\n * isString(new String()) // -> false\r\n * isString(text) // -> false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Number 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isNumber(0) // -> true\r\n * isNumber(.4) // -> true\r\n * isNumber(3.4E2) // -> true\r\n * isNumber(0xffffff) // -> true\r\n * isNumber(NaN) // -> true\r\n * isNumber(Infinity) // -> true\r\n * isNumber(-Infinity) // -> true\r\n *\r\n * // False\r\n * isNumber('2') // -> false\r\n * isNumber(2 + '1') // -> false\r\n * isNumber(new Number()) // -> false\r\n */\r\nconst isNumber = (val) => {\r\n  return _type(val) === TYPES.NUMBER\r\n}\r\n\r\nexport default isNumber\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 null\r\n * ========================================================================\r\n * @method isNull\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 null，返回 true，否则返回 false\r\n * @example\r\n *\r\n * let project\r\n *\r\n * isNull('') // -> false\r\n * isNull({}) // -> false\r\n * isNull(project) // -> false\r\n * isNull(0) // -> false\r\n * isNull(false) // -> false\r\n * isNull(Object.create(null)) // -> false\r\n *\r\n * isNull(null) // -> true\r\n */\r\nconst isNull = (val) => {\r\n  return _type(val) === TYPES.NULL\r\n}\r\n\r\nexport default isNull\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Boolean 类型\r\n * ========================================================================\r\n * @method isBoolean\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Boolean 类型，则返回 true，否则返回 false\r\n * @example\r\n *\r\n * let projects\r\n *\r\n * // False\r\n * isBoolean(1) // -> false\r\n * isBoolean('') // -> false\r\n * isBoolean(null) // -> false\r\n * isBoolean(NaN) // -> false\r\n * isBoolean(projects) // -> false\r\n *\r\n * // True\r\n * isBoolean(!!0) // -> true\r\n * isBoolean(false) // -> true\r\n * isBoolean(true) // -> true\r\n * isBoolean(Boolean('1')) // -> true\r\n * isBoolean(new Boolean('')) // -> false\r\n * isBoolean(!!projects) // -> true\r\n */\r\nconst isBoolean = (val) => {\r\n  return _type(val) === TYPES.BOOLEAN\r\n}\r\n\r\nexport default isBoolean\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 undefined（未定义），返回 true，否则返回 false\r\n * @example\r\n *\r\n * let projects\r\n *\r\n * isUndefined(projects) // -> true\r\n *\r\n * isUndefined([]) // -> false\r\n * isUndefined('') // -> false\r\n * isUndefined(0) // -> false\r\n * isUndefined(NaN) // -> false\r\n * isUndefined({}) // -> false\r\n * isUndefined(null) // -> false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Symbol 类型\r\n * ========================================================================\r\n * @method isSymbol\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Symbol 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const sym = Symbol('foo')\r\n * const symObj = Object(sym)\r\n *\r\n * isSymbol(sym) // -> true\r\n *\r\n * isSymbol(symObj) // -> false\r\n */\r\nconst isSymbol = (val) => {\r\n  let symbolValueOf\r\n\r\n  /* istanbul ignore else */\r\n  if (typeof Symbol === 'function') {\r\n    symbolValueOf = Symbol.prototype.valueOf\r\n  }\r\n\r\n  return (\r\n    _type(val) === TYPES.SYMBOL &&\r\n    symbolValueOf &&\r\n    typeof symbolValueOf.call(val) === 'symbol'\r\n  )\r\n}\r\n\r\nexport default isSymbol\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 BigInt 类型。\r\n * ========================================================================\r\n * @method isBigInt\r\n * @since 0.6.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 BigInt 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const MAX_SAFE_INTEGER = 9007199254740991\r\n * const bigint = BigInt(MAX_SAFE_INTEGER + 1)\r\n *\r\n * isBigInt(MAX_SAFE_INTEGER) // -> false\r\n * isBigInt(bigint) // -> true\r\n */\r\nconst isBigInt = (val) => {\r\n  let bigIntValueOf\r\n\r\n  /* istanbul ignore else */\r\n  if (BigInt && typeof BigInt === TYPES.FUNCTION) {\r\n    bigIntValueOf = BigInt.prototype.valueOf\r\n  }\r\n\r\n  return (\r\n    _type(val) === TYPES.BIG_INT &&\r\n    bigIntValueOf &&\r\n    _type(bigIntValueOf.call(val)) === TYPES.BIG_INT\r\n  )\r\n}\r\n\r\nexport default isBigInt\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isNumber","isNull","isBoolean","isUndefined","symbolValueOf","Symbol","valueOf","call","isSymbol","bigIntValueOf","BigInt","isBigInt"],"mappings":"4OACA,MAAMA,EAEK,SAFLA,EAGK,UAHLA,EAIE,OAJFA,EAKI,SALJA,EAMO,YANPA,EAOI,SAPJA,EAQI,SARJA,EAgCI,SAhCJA,EAmCK,UAnCLA,EAsCM,WCpCNC,EAAU,CAEd,gBAAiBD,EAEjB,eDIK,MCHL,mBDIU,UCHV,eDIK,MCHL,mBDIU,UCFV,iBDIO,QCHP,qBDIW,YCFX,oBDIW,WCHX,uBDIc,cCHd,qBDIY,YCHZ,sBDIa,aCHb,6BDIqB,oBCHrB,sBDIa,aCHb,uBDIc,cCHd,sBDIa,aCHb,uBDIc,cCHd,wBDIe,eCHf,wBDIe,eCHf,yBDIiB,gBCHjB,0BDIkB,iBCFlB,kBAAmBA,EACnB,mBAAoBA,EACpB,kBAAmBA,EACnB,kBAAmBA,EACnB,gBDEM,OCDN,iBDGO,QCFP,4BDGU,WCFV,oBAAqBA,EACrB,oBDHY,aCIZ,mBDES,UCDT,kBDEQ,SCDR,gBDEM,QEhCFE,EAASC,IACb,MAAMC,EAAOC,OAAOC,UAAUC,SAASC,MAAML,GACvCM,SAAiBN,EACvB,IAAIO,EAGJ,GAAIP,GAAKQ,SAA4B,IAAjBR,EAAIS,SACtBF,EAAOV,OAGP,OAAQS,GACN,IAAK,SACHC,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MACF,IAAK,UACHU,EAAOV,EACP,MACF,IAAK,YACHU,EAAOV,EACP,MACF,IAAK,SACHU,EAAOV,EACP,MAEF,QACEU,EAAOT,EAAQG,GAKrB,OAAOM,GAAQN,UCVID,GCZZD,EDcIC,KCdWH,GCGP,CAACG,GACTD,EAAMC,KAASH,EFWpBa,CAASV,IGfE,CAACA,GACPD,EAAMC,KAASH,EHepBc,CAAOX,IIVO,CAACA,GACVD,EAAMC,KAASH,EJUpBe,CAAUZ,IKjBM,CAACA,GACZD,EAAMC,KAASH,ELiBpBgB,CAAYb,IMtBC,CAACA,IAChB,IAAIc,EAOJ,MAJsB,mBAAXC,SACTD,EAAgBC,OAAOZ,UAAUa,SAIjCjB,EAAMC,KAASH,GACfiB,GACmC,iBAA5BA,EAAcG,KAAKjB,EAC3B,ENWCkB,CAASlB,IOxBI,CAACA,IAChB,IAAImB,EAOJ,OAJIC,eAAiBA,SAAWvB,IAC9BsB,EAAgBC,OAAOjB,UAAUa,SAIjCjB,EAAMC,KAASH,GACfsB,GACApB,EAAMoB,EAAcF,KAAKjB,MAAUH,CACpC,EPaCwB,CAASrB"}