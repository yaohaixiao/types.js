{"version":3,"file":"types.min.js","sources":["../../enum/types.js","../../enum/objects.js","../../utils/_type.js","../../isNumber.js","../../isInteger.js","../../isFloat.js","../../isInfinite.js","../../isString.js","../../isBlank.js","../../isBase64.js","../../isChinese.js","../../isIDNumber.js","../../isEmail.js","../../isNull.js","../../isBuffer.js","../../isFunction.js","../../isObject.js","../../isHTMLCollection.js","../../isTypedArray.js","../../isArray.js","../../isEmptyArray.js","../../isObjectLike.js","../../isPlainObject.js","../../isUndefined.js","../../utils/hasOwn.js","../../isEmptyObject.js","../../isArguments.js","../../isEmptyArguments.js","../../isEmpty.js","../../isUUID.js","../../isIPAddress.js","../../isHex.js","../../enum/tags.js","../../isHTML.js","../../utils/trim.js","../../isSVG.js","../../isJSON.js","../../utils/_isTime.js","../../utils/_isDate.js","../../isTime.js","../../isNativeFunction.js","../../isConstructor.js","../../isPrototype.js","../../isVNode.js","../../isXML.js","../../isArrayLike.js","../../isBigInt.js","../../isBoolean.js","../../isWindow.js","../../utils/getWindow.js","../../isElement.js","../../isFragment.js","../../isTextNode.js","../../isSymbol.js","../../utils/methods.js","../../is.js","../../utils/typeOfNumber.js","../../utils/typeOfString.js","../../utils/typeOfObject.js","../../isAlpha.js","../../isArrayBuffer.js","../../isArrayLikeObject.js","../../isBigInt64Array.js","../../isBigUint64Array.js","../../isBinary.js","../../isDataView.js","../../isDate.js","../../isDOM.js","../../isError.js","../../isEven.js","../../isFalsy.js","../../isFloat32Array.js","../../isFloat64Array.js","../../isGuid.js","../../isHash.js","../../isHTMLElement.js","../../isInt8Array.js","../../isInt16Array.js","../../isInt32Array.js","../../isLength.js","../../isMap.js","../../isNaN.js","../../isNil.js","../../isNode.js","../../isNumeric.js","../../isOdd.js","../../isPhoneNumber.js","../../isPrime.js","../../isPrimitive.js","../../isPromise.js","../../isRegExp.js","../../isSafeInteger.js","../../isSet.js","../../isShadowRoot.js","../../isStream.js","../../isTruly.js","../../isUint8Array.js","../../isUint8ClampedArray.js","../../isUint16Array.js","../../isUint32Array.js","../../isURL.js","../../utils/getURLPattern.js","../../isValue.js","../../isWeakMap.js","../../isWeakSet.js"],"sourcesContent":["// 能够识别的数据类型名称枚举值\r\nconst TYPES = {\r\n  /* ===== Primitive data types ===== */\r\n  BIG_INT: 'bigint',\r\n  BOOLEAN: 'boolean',\r\n  NULL: 'null',\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  SYMBOL: 'symbol',\r\n  /* ===== Collections ===== */\r\n  SET: 'set',\r\n  WEAK_SET: 'weakset',\r\n  MAP: 'map',\r\n  WEAK_MAP: 'weakmap',\r\n  /* ===== Array ===== */\r\n  ARRAY: 'array',\r\n  ARGUMENTS: 'arguments',\r\n  /* ===== Typed ===== */\r\n  DATA_VIEW: 'dataview',\r\n  ARRAY_BUFFER: 'arraybuffer',\r\n  INT8_ARRAY: 'int8array',\r\n  UNIT8_ARRAY: 'uint8array',\r\n  UNIT8_CLAMPED_ARRAY: 'uint8clampedarray',\r\n  INT16_ARRAY: 'int16array',\r\n  UNIT16_ARRAY: 'uint16array',\r\n  INT32_ARRAY: 'int32array',\r\n  UNIT32_ARRAY: 'uint32array',\r\n  FLOAT32_ARRAY: 'float32array',\r\n  FLOAT64_ARRAY: 'float64array',\r\n  BIG_INT64_ARRAY: 'bigint64array',\r\n  BIG_UINT64_ARRAY: 'biguint64array',\r\n  /* ===== Object ===== */\r\n  OBJECT: 'object',\r\n  COLLECTION: 'collection',\r\n  DATE: 'date',\r\n  ELEMENT: 'element',\r\n  ERROR: 'error',\r\n  FRAGMENT: 'fragment',\r\n  FUNCTION: 'function',\r\n  PROMISE: 'promise',\r\n  REGEXP: 'regexp',\r\n  TEXT: 'text'\r\n}\r\n\r\nexport default TYPES\r\n","import TYPES from './types'\r\n\r\n// Object.prototype.toString() 输出的类型名称枚举值\r\nconst OBJECTS = {\r\n  /* ===== Primitive data types ===== */\r\n  '[object Null]': TYPES.NULL,\r\n  /* ===== Collections ===== */\r\n  '[object Set]': TYPES.SET,\r\n  '[object WeakSet]': TYPES.WEAK_SET,\r\n  '[object Map]': TYPES.MAP,\r\n  '[object WeakMap]': TYPES.WEAK_MAP,\r\n  /* ===== Array ===== */\r\n  '[object Array]': TYPES.ARRAY,\r\n  '[object Arguments]': TYPES.ARGUMENTS,\r\n  /* ===== Typed ===== */\r\n  '[object DataView]': TYPES.DATA_VIEW,\r\n  '[object ArrayBuffer]': TYPES.ARRAY_BUFFER,\r\n  '[object Int8Array]': TYPES.INT8_ARRAY,\r\n  '[object Uint8Array]': TYPES.UNIT8_ARRAY,\r\n  '[object Uint8ClampedArray]': TYPES.UNIT8_CLAMPED_ARRAY,\r\n  '[object Int16Array]': TYPES.INT16_ARRAY,\r\n  '[object Uint16Array]': TYPES.UNIT16_ARRAY,\r\n  '[object Int32Array]': TYPES.INT32_ARRAY,\r\n  '[object Uint32Array]': TYPES.UNIT32_ARRAY,\r\n  '[object Float32Array]': TYPES.FLOAT32_ARRAY,\r\n  '[object Float64Array]': TYPES.FLOAT64_ARRAY,\r\n  '[object BigInt64Array]': TYPES.BIG_INT64_ARRAY,\r\n  '[object BigUint64Array]': TYPES.BIG_UINT64_ARRAY,\r\n  /* ===== Object ===== */\r\n  '[object Object]': TYPES.OBJECT,\r\n  '[object Boolean]': TYPES.OBJECT,\r\n  '[object String]': TYPES.OBJECT,\r\n  '[object Number]': TYPES.OBJECT,\r\n  '[object Date]': TYPES.DATE,\r\n  '[object Error]': TYPES.ERROR,\r\n  '[object DocumentFragment]': TYPES.FRAGMENT,\r\n  '[object Function]': TYPES.FUNCTION,\r\n  '[object NodeList]': TYPES.COLLECTION,\r\n  '[object Promise]': TYPES.PROMISE,\r\n  '[object RegExp]': TYPES.REGEXP,\r\n  '[object Text]': TYPES.TEXT\r\n}\r\n\r\nexport default OBJECTS\r\n","import TYPES from '../enum/types'\r\nimport OBJECTS from '../enum/objects'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method _type\r\n * @param {*} val - 要检测的任意值\r\n * @returns {String} - 返回检测数据类型的字符串\r\n */\r\nconst _type = (val) => {\r\n  const type = Object.prototype.toString.apply(val)\r\n  const _typeof = typeof val\r\n  let name\r\n\r\n  // HTMLElement\r\n  if (val?.tagName && val.nodeType === 1) {\r\n    name = TYPES.ELEMENT\r\n  } else {\r\n    /* ===== 原始值类型（Primitive data types） ===== */\r\n    switch (_typeof) {\r\n      case 'bigint':\r\n        name = TYPES.BIG_INT\r\n        break\r\n      case 'string':\r\n        name = TYPES.STRING\r\n        break\r\n      case 'number':\r\n        name = TYPES.NUMBER\r\n        break\r\n      case 'boolean':\r\n        name = TYPES.BOOLEAN\r\n        break\r\n      case 'undefined':\r\n        name = TYPES.UNDEFINED\r\n        break\r\n      case 'symbol':\r\n        name = TYPES.SYMBOL\r\n        break\r\n      // 对象（引用）类型的数据\r\n      default:\r\n        name = OBJECTS[type]\r\n        break\r\n    }\r\n  }\r\n\r\n  return name || type\r\n}\r\n\r\nexport default _type\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Number 类型\r\n * ========================================================================\r\n * @method isNumber\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Number 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isNumber(0) // -> true\r\n * isNumber(.4) // -> true\r\n * isNumber(3.4E2) // -> true\r\n * isNumber(0xffffff) // -> true\r\n * isNumber(NaN) // -> true\r\n * isNumber(Infinity) // -> true\r\n * isNumber(-Infinity) // -> true\r\n *\r\n * // False\r\n * isNumber('2') // -> false\r\n * isNumber(2 + '1') // -> false\r\n * isNumber(new Number()) // -> false\r\n */\r\nconst isNumber = (val) => {\r\n  return _type(val) === TYPES.NUMBER\r\n}\r\n\r\nexport default isNumber\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isInteger\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // False\r\n * isInteger(2.4) // -> false\r\n * isInteger(3.4234E3) // -> false\r\n * isInteger('1') // -> false\r\n * isInteger(Number('3.4556645445E7')) // -> false\r\n * isInteger(NaN) // -> false\r\n * isInteger(Infinity) // -> false\r\n * isInteger(-Infinity) // -> false\r\n *\r\n * // True\r\n * isInteger(2) // -> true\r\n * isInteger(2.0) // -> true\r\n * isInteger(3.4234E4) // -> true\r\n * isInteger(0xffffff) // -> true\r\n * isInteger(Number('1')) // -> true\r\n * isInteger(parseInt('1.0', 10)) // -> true\r\n * isInteger(Math.ceil(2.6)) // -> true\r\n */\r\nconst isInteger = (val) => {\r\n  return isNumber(val) && !isNaN(val) && Number(val) === val && val % 1 === 0\r\n}\r\n\r\nexport default isInteger\r\n","import isNumber from './isNumber'\r\nimport isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据是否为整数\r\n * ========================================================================\r\n * @method isFloat\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是整数，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isFloat(.1) // -> true\r\n * isFloat(1.01) // -> true\r\n * isFloat(Number(\"3.4556645445E7\")) // -> true\r\n * isFloat(Number(\"3.4556645445E10\")) // -> false\r\n * isFloat(2.0) // -> false\r\n * isFloat(0xffffff) // -> false\r\n * isFloat(NaN) // -> false\r\n * isFloat(Infinity) // -> false\r\n */\r\nfunction isFloat(val) {\r\n  return (\r\n    isNumber(val) &&\r\n    !isNaN(val) &&\r\n    isFinite(val) &&\r\n    !isInteger(val) &&\r\n    Number(val) === val &&\r\n    val % 1 !== 0\r\n  )\r\n}\r\n\r\nexport default isFloat\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据的数据是正无穷或者负无穷\r\n * ========================================================================\r\n * @method isInfinite\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是正无穷或者负无穷，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isInfinite(2.4) // -> false\r\n *\r\n * isInfinite(Infinity) // -> true\r\n * isInfinite(-Infinity) // -> true\r\n */\r\nconst isInfinite = (val) => {\r\n  return isNumber(val) && (val === Infinity || val === -Infinity)\r\n}\r\n\r\nexport default isInfinite\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为字符串\r\n * ========================================================================\r\n * @method isString\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const text = document.createTextNode('text')\r\n *\r\n * isString('') // -> true\r\n * isString(String(2)) // -> true\r\n * isString(2 + '0') // -> true\r\n *\r\n * isString(2) // -> false\r\n * isString(new String()) // -> false\r\n * isString(text) // -> false\r\n */\r\nconst isString = (obj) => {\r\n  return _type(obj) === TYPES.STRING\r\n}\r\n\r\nexport default isString\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否只包空格\r\n * ========================================================================\r\n * @method isBlank\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 只包含空格，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isBlank('  ') // -> true\r\n * isBlank(new String()) // -> false\r\n * isBlank('') // -> true\r\n */\r\nfunction isBlank(val) {\r\n  if (!isString(val)) {\r\n    return false\r\n  }\r\n\r\n  return /^\\s*$/.test(val)\r\n}\r\n\r\nexport default isBlank\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为一个基于 base64 编码的字符串。\r\n * ========================================================================\r\n * @method isBase64\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 base64 编码的字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isBase64('Z29vZA==') // -> true\r\n * isBase64('aXNCYXNlNjQ=2') // -> false\r\n */\r\nconst isBase64 = (val) => {\r\n  const REGEXP_BASE64 =\r\n    /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}={2})$/gm\r\n  return isString(val) && (!val.length || REGEXP_BASE64.test(val))\r\n}\r\n\r\nexport default isBase64\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测字符串是否为中文字符\r\n * ========================================================================\r\n * Wiki 介绍中文字符包含以下内容：\r\n *\r\n * 1. 中文汉字\r\n * 2. 象形文字扩展 A-H\r\n * 3. 兼容象形文字符\r\n * 4. 兼容表意文字增补字符\r\n * 5. 中文标点符号\r\n * 6. 兼容标点符号\r\n *\r\n * 其中：\r\n *\r\n * 兼容象形文字符：[0xf900, 0xfaff],（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs）和\r\n * 兼容表意文字增补字符：[0x2f800, 0x2fa1f]（https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs_Supplement）\r\n *\r\n * 只是看上去像汉字，因此在 isChinese() 方法中也没有纳入到汉字字符\r\n * ========================================================================\r\n * @method isChinese\r\n * @since 1.2.0\r\n * @category String\r\n * @param {*} str - （必须）检测字符串\r\n * @param {Boolean} [includePunctuation] - （可选）是否包含标点符号：默认值：true\r\n * @returns {boolean} - ‘val’ 是中文字符，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * let chinese\r\n *\r\n * // 非字符串\r\n * isChinese(null) // -> false\r\n * isChinese(chinese) // -> false\r\n * isChinese({}) // -> false\r\n * isChinese([]) // -> false\r\n * isChinese(Symbol('symbol')) // -> false\r\n *\r\n * // Ascii 字符\r\n * isChinese(12) // -> false\r\n * isChinese('chinese') // -> false\r\n * isChinese('+=*\\/') // -> false\r\n *\r\n * // 汉字字符\r\n * isChinese('汉字字符：尅靈') // -> true\r\n * isChinese('扩展字符：㐥𠁜𪝹𫞺𫡡𭀔𭍓') // -> true\r\n *\r\n * // 标点符号\r\n * isChinese('标点符号：。，、；：×·—…（）『』【】《》？！‘’“”～') // -> true\r\n * isChinese('兼容标点符号：︰︱︲︳︴︵︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄﹅﹆﹇﹈﹉﹊﹋﹌﹍﹎﹏') // -> true\r\n *\r\n * // 不包含标点符号，则以下检测无法通过\r\n * isChinese('标点符号：。，、；：×·—…（）『』【】《》？！‘’“”～', false) // -> false\r\n */\r\nconst isChinese = (str, includePunctuation = true) => {\r\n  // 转换成正则表达式\r\n  const toRegExp = (range) => {\r\n    const pattern = range\r\n      .map((range) => {\r\n        const rangeStart = range[0]\r\n        const rangeEnd = range[1]\r\n        const hexStart = rangeStart.toString(16)\r\n        const hexEnd = rangeEnd.toString(16)\r\n\r\n        if (rangeStart === rangeEnd) {\r\n          return `\\\\u{${hexStart}}`\r\n        }\r\n        return `[\\\\u{${hexStart}}-\\\\u{${hexEnd}}]`\r\n      })\r\n      .join('|')\r\n\r\n    return new RegExp(`^(?:${pattern})+$`, 'u')\r\n  }\r\n  // 文字\r\n  // https://en.wikipedia.org/wiki/CJK_Unified_Ideographs\r\n  const chineseIdeographs = [\r\n    // 中文汉字\r\n    [0x4e00, 0x9fff],\r\n\r\n    // 象形文字扩展 A - H\r\n    [0x3400, 0x4dbf],\r\n    [0x20000, 0x2a6df],\r\n    [0x2a700, 0x2b73f],\r\n    [0x2b740, 0x2b81f],\r\n    [0x2b820, 0x2ceaf],\r\n    [0x2ceb0, 0x2ebef],\r\n    [0x30000, 0x3134f],\r\n    [0x31350, 0x323af]\r\n  ]\r\n  // 标点符号\r\n  const chinesePunctuations = [\r\n    // ，\r\n    [0xff0c, 0xff0c],\r\n    // 。\r\n    [0x3002, 0x3002],\r\n    // ·\r\n    [0x00b7, 0x00b7],\r\n    // ×\r\n    [0x00d7, 0x00d7],\r\n    // —\r\n    [0x2014, 0x2014],\r\n    // ‘\r\n    [0x2018, 0x2018],\r\n    // ’\r\n    [0x2019, 0x2019],\r\n    // “\r\n    [0x201c, 0x201c],\r\n    // ”\r\n    [0x201d, 0x201d],\r\n    // …\r\n    [0x2026, 0x2026],\r\n    // 、\r\n    [0x3001, 0x3001],\r\n    // 《\r\n    [0x300a, 0x300a],\r\n    // 》\r\n    [0x300b, 0x300b],\r\n    // 『\r\n    [0x300e, 0x300e],\r\n    // 』\r\n    [0x300f, 0x300f],\r\n    // 【\r\n    [0x3010, 0x3010],\r\n    // 】\r\n    [0x3011, 0x3011],\r\n    // ！\r\n    [0xff01, 0xff01],\r\n    // （\r\n    [0xff08, 0xff08],\r\n    // ）\r\n    [0xff09, 0xff09],\r\n    // ：\r\n    [0xff1a, 0xff1a],\r\n    // ；\r\n    [0xff1b, 0xff1b],\r\n    // ？\r\n    [0xff1f, 0xff1f],\r\n    // ～\r\n    [0xff5e, 0xff5e],\r\n    // 兼容性标点符号\r\n    // https://en.wikipedia.org/wiki/CJK_Compatibility_Forms\r\n    [0xfe30, 0xfe4f]\r\n  ]\r\n  const asciiChars = /\\w+/\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  if (asciiChars.test(str)) {\r\n    return false\r\n  }\r\n\r\n  const pattern = includePunctuation\r\n    ? toRegExp(chineseIdeographs.concat(chinesePunctuations))\r\n    : toRegExp(chineseIdeographs)\r\n\r\n  return pattern.test(str)\r\n}\r\n\r\nexport default isChinese\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为（中国）身份证号码\r\n * ========================================================================\r\n * @method isIDNumber\r\n * @since 2.6.0\r\n * @category String\r\n * @param {*} idNumber - 要检测的号码\r\n * @return {Boolean} - true - 表示检测数据是合法的神风证号码（格式），false 则表示不是\r\n * @example\r\n *\r\n * // 有效的 15 位身份证号码\r\n * isIDNumber('110105491231002'); // -> true\r\n *\r\n * // 无效的 15 位身份证号码\r\n * isIDNumber('123456789012345'); // -> false\r\n *\r\n * // 有效的 18 位身份证号码（校验码为 X）\r\n * isIDNumber('11010519491231002X'); // -> true\r\n *\r\n * // 无效的 18 位身份证号码（校验码错误）\r\n * isIDNumber('110105194912310029'); // -> false\r\n *\r\n * // 无效的 18 位身份证号码（非法字符 Y）\r\n * isIDNumber('11010519491231002Y'); // -> false\r\n *\r\n * // 无效的 18 位身份证号码\r\n * isIDNumber('123456789012345678'); // -> false\r\n *\r\n * // 长度不符合\r\n * isIDNumber('11010519491231002'); // -> false\r\n * isIDNumber('11010519491231002XX'); // -> false\r\n *\r\n * // 格式错误\r\n * isIDNumber('A1010519491231002X'); // -> false\r\n * isIDNumber('11010519491231002x'); // -> false\r\n *\r\n * // 非字符串\r\n * isIDNumber(110105194912310021); // -> false\r\n */\r\nconst isIDNumber = (idNumber) => {\r\n  // 1. 检查是否为字符串类型\r\n  if (!isString(idNumber)) {\r\n    return false\r\n  }\r\n\r\n  // 2. 定义 15 位和 18 位身份证号码的正则表达式\r\n  const OLD =\r\n    /^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}$/\r\n  const NEW =\r\n    /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/\r\n  const FACTOR = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]\r\n  const PARITY = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']\r\n  const MAX_INDEX = 17\r\n  let numbers = []\r\n  let i = 0\r\n  let sum = 0\r\n  let mod = 0\r\n  let lastChar = ''\r\n\r\n  // 3. 检查长度是否为 15 位或 18 位，并进行初步正则匹配\r\n  switch (idNumber.length) {\r\n    case 15:\r\n      return OLD.test(idNumber)\r\n    case 18:\r\n      if (!NEW.test(idNumber)) {\r\n        return false\r\n      }\r\n\r\n      // 4. 对于 18 位身份证号码，进行校验位验证\r\n      numbers = idNumber.split('')\r\n\r\n      for (; i < MAX_INDEX; i++) {\r\n        sum += parseInt(numbers[i]) * FACTOR[i]\r\n      }\r\n\r\n      mod = sum % 11\r\n      lastChar = numbers[MAX_INDEX]\r\n\r\n      return PARITY[mod] === lastChar\r\n    default:\r\n      return false\r\n  }\r\n}\r\n\r\nexport default isIDNumber\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测是否为正确的 Email 邮箱地址格式\r\n * ========================================================================\r\n * @method isEmail\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Email 邮箱地址格式，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmail('robert@gmail.com') // => true\r\n * isEmail('yaohaixiao@gmail.c') // => true\r\n * isEmail('haixiao-yao@gmail.com') // => true\r\n * isEmail('haixiao_yao@gmail.com') // => true\r\n * isEmail('haixiao&yao@gmail.com') // => true\r\n * isEmail('haixiao~yao@gmail.com') // => true\r\n * isEmail('haixiao+yao@gmail.com') // => true\r\n * isEmail('haixiao^yao@gmail.com') // => true\r\n * isEmail('haixiao%yao@gmail.com') // => true\r\n * isEmail('haixiao$yao@gmail.com') // => true\r\n * isEmail('haixiao.yao@gmail.com') // => true\r\n * isEmail('haixiao/yao@gmail.com') // => true\r\n * isEmail('haixiao#yao@gmail.com') // => true\r\n * isEmail('yao{haixiao@gmail.com') // => true\r\n * isEmail('yao|haixiao@gmail.com') // => true\r\n * isEmail('yao}haixiao@gmail.com') // => true\r\n *\r\n * isEmail('robert#gmail.com') // => false\r\n * isEmail('yao\\haixiao@gmail.com') // => false\r\n * isEmail('yao[haixiao@gmail.com') // => false\r\n */\r\nconst isEmail = (val) => {\r\n  const pattern =\r\n    /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/\r\n  return isString(val) && pattern.test(val)\r\n}\r\n\r\nexport default isEmail\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 null\r\n * ========================================================================\r\n * @method isNull\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 null，返回 true，否则返回 false\r\n * @example\r\n *\r\n * let project\r\n *\r\n * isNull('') // -> false\r\n * isNull({}) // -> false\r\n * isNull(project) // -> false\r\n * isNull(0) // -> false\r\n * isNull(false) // -> false\r\n * isNull(Object.create(null)) // -> false\r\n *\r\n * isNull(null) // -> true\r\n */\r\nconst isNull = (val) => {\r\n  return _type(val) === TYPES.NULL\r\n}\r\n\r\nexport default isNull\r\n","/**\r\n * 验证数据是否为 Buffer 类型\r\n * ========================================================================\r\n * @method isBuffer\r\n * @since 1.6.0\r\n * @category Object\r\n * @param {*} val - 待检测的数据\r\n * @returns {Boolean} 'val' 是 Buffer 类型返回 true，否则返回 false\r\n * @example\r\n *\r\n * const buffer = Buffer.alloc(15)\r\n *\r\n * isBuffer(new ArrayBuffer(8)) // -> false\r\n * isBuffer(new Uint8Array(2)) // -> false\r\n *\r\n * isBuffer(buffer) // -> true\r\n */\r\nconst isBuffer = (val) => {\r\n  return Buffer ? Buffer.isBuffer(val) : false\r\n}\r\n\r\nexport default isBuffer\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Function 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const blank = () => {}\r\n * const fn = new Function()\r\n *\r\n * function empty(){}\r\n *\r\n * isFunction(empty) // -> true\r\n * isFunction(blank) // -> true\r\n * isFunction(fn) // -> true\r\n * isFunction(parseInt) // -> true\r\n * isFunction(Array) // -> true\r\n * isFunction(Boolean) // -> true\r\n * isFunction(Date) // -> true\r\n * isFunction(Number) // -> true\r\n * isFunction(Object) // -> true\r\n * isFunction(RegExp) // -> true\r\n * isFunction(String) // -> true\r\n *\r\n * isFunction(Math) // -> false\r\n * isFunction(console) // -> false\r\n */\r\nconst isFunction = (val) => {\r\n  return _type(val) === TYPES.FUNCTION\r\n}\r\n\r\nexport default isFunction\r\n","import isFunction from './isFunction'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为对象\r\n * ========================================================================\r\n * @method isObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n *\r\n * // True\r\n * isObject({}) // => true\r\n * isObject(Object) // => true\r\n * isObject(new Object()) // => true\r\n * isObject(Object.create(null)) // => true\r\n * isObject([]) // => true\r\n * isObject(() => {}) // => true\r\n * isObject(class {}) // => true\r\n * isObject($list) // => true\r\n *\r\n * // False\r\n * isObject('null') // => false\r\n * isObject(1) // => false\r\n * isObject(false) // => false\r\n * isObject(Symbol('ok')) // => false\r\n * isObject($list) // => false\r\n *\r\n * // 针对 null，type.js 认为不是一个有效对象\r\n * // 以避免将 null 作为普通对象操作导致的错误\r\n * isObject(null) // => false\r\n */\r\nconst isObject = (val) => {\r\n  const type = typeof val\r\n\r\n  return !!(val && (type === TYPES.OBJECT || isFunction(val)))\r\n}\r\n\r\nexport default isObject\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测数据的是否为 HTMLNodeList 对象\r\n * ========================================================================\r\n * @method isHTMLCollection\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 HTMLNodeList 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n *\r\n * isHTMLCollection($list) // -> false\r\n *\r\n * isHTMLCollection($div) // -> false\r\n *\r\n * isHTMLCollection($text) // -> false\r\n *\r\n * isHTMLCollection($items) // -> true\r\n *\r\n * isHTMLCollection($items) // -> false\r\n */\r\nconst isHTMLCollection = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.COLLECTION)\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import _type from './utils/_type'\r\n/**\r\n * 检测测试数据是否为 TypedArray 类型\r\n * ========================================================================\r\n * @method isTypedArray\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 type arrays 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(str) {\r\n *   args = arguments\r\n *   return str\r\n * }\r\n *\r\n * test('str')\r\n *\r\n * isTypedArray( args ) // -> false\r\n * isTypedArray( numbers ) // -> false\r\n * isTypedArray( new Array() ) // -> false\r\n *\r\n * isTypedArray(new Int8Array([])) // -> true\r\n * isTypedArray(new Int16Array([])) // -> true\r\n * isTypedArray(new Int32Array([])) // -> true\r\n *\r\n * isTypedArray(new Uint8ClampedArray([])) // -> true\r\n * isTypedArray(new Uint8Array([])) // -> true\r\n * isTypedArray(new Uint16Array([])) // -> true\r\n * isTypedArray(new Uint32Array([])) // -> true\r\n *\r\n * isTypedArray(new Float32Array([])) // -> true\r\n * isTypedArray(new Float64Array([])) // -> true\r\n *\r\n * isTypedArray(new BigInt64Array(42)) // -> true\r\n * isTypedArray(new BigUint64Array(42)) // -> true\r\n */\r\nconst isTypedArray = (val) => {\r\n  const type = _type(val)\r\n  const isTyped =\r\n    /^(?:Float(?:32|64)|(Int|Uint)(?:8|16|32)|Uint8Clamped|Big(Int|Uint)64)Array$/i\r\n  return isTyped.test(type)\r\n}\r\n\r\nexport default isTypedArray\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @since 0.2.0\r\n * @category Array\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是 Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isArray([]) // -> true\r\n * isArray(new Array()) // -> true\r\n * isArray('type.js'.split('')) // -> true\r\n *\r\n * // False\r\n * // 虽然  arguments 对象看起来也像数组，但是它也不是数组\r\n * isArray(args) // -> false\r\n * // 虽然 HTMLNodeList 的看起来像数组，但它并不是数组\r\n * isArray(document.getElementsByTagName('li')) // -> false\r\n * isArray(LooksLike) // -> false\r\n * isArray(new Int8Array()) // -> false\r\n */\r\nconst isArray = (val) => {\r\n  return Array.isArray ? Array.isArray(val) : _type(val) === TYPES.ARRAY\r\n}\r\n\r\nexport default isArray\r\n","import isArray from './isArray'\r\n\r\n/**\r\n * 检测测试数据是否为空字数组\r\n * ========================================================================\r\n * @method isEmptyArray\r\n * @since 0.6.0\r\n * @category Array\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是空数组，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmptyArray(new Int8Array([]) // -> false\r\n *\r\n * isEmptyArray([]) // -> true\r\n *\r\n * isEmptyArray(new Array) // -> true\r\n *\r\n * isEmptyArray([1]) // -> false\r\n */\r\nconst isEmptyArray = (val) => {\r\n  return isArray(val) && val.length === 0\r\n}\r\n\r\nexport default isEmptyArray\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测测试数据是否为类似 Object 类型\r\n * ========================================================================\r\n * @method isObjectLike\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是类似 Object 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isObjectLike(function empty(){}) // -> true\r\n * isObjectLike({}) // -> true\r\n * isObjectLike(Object.create(null)) // -> true\r\n * isObjectLike(Object.create({})) // -> true\r\n * isObjectLike(new Function()) // -> true\r\n *\r\n * // False\r\n * isObjectLike([]) // -> false\r\n * isObjectLike(null) // -> false\r\n * isObjectLike(document.getElementById('wrap')) // -> fal\r\n */\r\nconst isObjectLike = (val) => {\r\n  return isObject(val) && val !== null\r\n}\r\n\r\nexport default isObjectLike\r\n","import isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为普通对象\r\n * ========================================================================\r\n * @method isPlainObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是普通对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * let udf\r\n *\r\n * // 基础类型\r\n * isPlainObject(2) // -> false\r\n * isPlainObject('str') // -> false\r\n * isPlainObject(false) // -> false\r\n * isPlainObject(null) // -> false\r\n * isPlainObject(udf) // -> false\r\n *\r\n * // 引用类型\r\n * isPlainObject(new Function()) // -> false\r\n * isPlainObject(function(){}) // -> false\r\n * isPlainObject(() => {}) // -> false\r\n * isPlainObject(class{}) // -> false\r\n *\r\n * isPlainObject(new class{}) // -> true\r\n * isPlainObject({}) // -> true\r\n * isPlainObject(Object.create(null)) // -> true\r\n * isPlainObject(new Object()) // -> true\r\n * isPlainObject([]) // -> true\r\n * isPlainObject(/s+/ig) // -> true\r\n * isPlainObject(new String()) // -> true\r\n * isPlainObject(new Number()) // -> true\r\n * isPlainObject(new Boolean()) // -> true\r\n * isPlainObject(new Array()) // -> true\r\n * isPlainObject(new Date()) // -> true\r\n */\r\nconst isPlainObject = (val) => {\r\n  const getPrototypeOf = Object.getPrototypeOf\r\n  let proto\r\n\r\n  // Detect obvious negatives\r\n  if (!isObjectLike(val)) {\r\n    return false\r\n  }\r\n\r\n  proto = val.prototype\r\n\r\n  // JavaScript 对象分为两种：普通对象和函数对象\r\n  // 普通对象：原型是 __proto__，没有 prototype 原型（属性）\r\n  // 函数对象：原型是 prototype ，prototype 只存在于函数对象上\r\n  if (!proto) {\r\n    return true\r\n  }\r\n\r\n  proto = val\r\n\r\n  while (getPrototypeOf(proto) !== null) {\r\n    proto = getPrototypeOf(proto)\r\n  }\r\n\r\n  return getPrototypeOf(val) === proto\r\n}\r\n\r\nexport default isPlainObject\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否 undefined（未定义）\r\n * ========================================================================\r\n * @method isUndefined\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 undefined（未定义），返回 true，否则返回 false\r\n * @example\r\n *\r\n * let projects\r\n *\r\n * isUndefined(projects) // -> true\r\n *\r\n * isUndefined([]) // -> false\r\n * isUndefined('') // -> false\r\n * isUndefined(0) // -> false\r\n * isUndefined(NaN) // -> false\r\n * isUndefined({}) // -> false\r\n * isUndefined(null) // -> false\r\n */\r\nconst isUndefined = (val) => {\r\n  return _type(val) === TYPES.UNDEFINED\r\n}\r\n\r\nexport default isUndefined\r\n","import isUndefined from '../isUndefined'\r\n\r\n/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n\r\n  if (hasOwnProperty) {\r\n    // 不建议直接实用对象从原型链继承的 hasOwnProperty() 方法\r\n    // 所以采用直接调用 Object.prototype.hasOwnProperty() 方法\r\n    return hasOwnProperty.call(obj, prop)\r\n  }\r\n\r\n  return (\r\n    // 从对象构造函数的原型链继承的同名属性不算 obj 自身的属性\r\n    !isUndefined(obj[prop]) && obj.constructor.prototype[prop] !== obj[prop]\r\n  )\r\n}\r\n\r\nexport default hasOwn\r\n","import isPlainObject from './isPlainObject'\r\nimport hasOwn from './utils/hasOwn'\r\n\r\n/**\r\n * 检测测试数据是否为空（单体）对象\r\n * ========================================================================\r\n * @method isEmptyObject\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} obj - 要检测的数据\r\n * @returns {Boolean} 'val' 是空对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * function Person(name,age){\r\n *    this.name = name;\r\n *    this.age = age;\r\n * }\r\n *\r\n * isEmptyObject({}) // -> true\r\n * isEmptyObject([]) // true\r\n * isEmptyObject(Person) // true\r\n * isEmptyObject(new Object()) // true\r\n * isEmptyObject(new Boolean()) // true\r\n * isEmptyObject(new Array()) // true\r\n * isEmptyObject(new Date('2017-12-11')) // true\r\n * isEmptyObject(new RegExp('\\s+','ig')) // true\r\n * isEmptyObject(new String()) // true\r\n *\r\n * isEmptyObject(new Function()) // false\r\n * isEmptyObject(['']) // false\r\n * isEmptyObject(null) // false\r\n * isEmptyObject({name:'type.js'}) // -> false\r\n * isEmptyObject(new Person('yaohaixiao',30)) // false\r\n */\r\nconst isEmptyObject = (obj) => {\r\n  let prop\r\n\r\n  if (!isPlainObject(obj)) {\r\n    return false\r\n  }\r\n\r\n  for (prop in obj) {\r\n    /* istanbul ignore else */\r\n    if (hasOwn(obj, prop)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default isEmptyObject\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\nimport isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为 arguments 对象\r\n * ========================================================================\r\n * @method isArguments\r\n * @since 0.2.0\r\n * @category Arguments\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} ‘val’ 是 Arguments 对象，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * const argsLike = { '0': 3, '1': 4, length: 2 }\r\n * const $items = document.querySelectorAll('.item')\r\n * let args\r\n *\r\n * function sum(a, b){\r\n *   args = arguments\r\n *\r\n *   return a + b\r\n * }\r\n *\r\n * sum(3, 5)\r\n *\r\n * isArguments(argsLike) // -> false\r\n * isArguments([]) // -> false\r\n * isArguments(items) // -> false\r\n *\r\n * is(args) // -> 'arguments'\r\n * isArguments(args) // -> true\r\n */\r\nconst isArguments = (val) => {\r\n  return isObjectLike(val) && _type(val) === TYPES.ARGUMENTS\r\n}\r\n\r\nexport default isArguments\r\n","import isArguments from './isArguments'\r\n\r\n/**\r\n * 检测测试 arguments 对象长度为 0\r\n * ========================================================================\r\n * @method isEmptyArguments\r\n * @since 2.6.0\r\n * @category Arguments\r\n * @param {*} val - val 待检测的数据。\r\n * @returns {Boolean} true - 表示检测 arguments 对象长度为 0，false 则表示不是。\r\n * @example\r\n *\r\n * let args\r\n * const fn = function () {arg = arguments}\r\n *\r\n * fn()\r\n *\r\n * isEmptyArguments(args) // -> true\r\n *\r\n * fn(1)\r\n *\r\n * isEmptyArguments(args) // -> false\r\n */\r\nconst isEmptyArguments = (val) => {\r\n  return isArguments(val) && val.length === 0\r\n}\r\n\r\nexport default isEmptyArguments\r\n","import isString from './isString'\r\nimport isNull from './isNull'\r\nimport isBuffer from './isBuffer'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isTypedArray from './isTypedArray'\r\nimport isEmptyArray from './isEmptyArray'\r\nimport isEmptyObject from './isEmptyObject'\r\nimport isEmptyArguments from './isEmptyArguments'\r\n\r\n/**\r\n * 检测测试数据是否为空字符串、数组、对象或者空的 arguments 参数\r\n * ========================================================================\r\n * @method isEmpty\r\n * @since 0.2.0\r\n * @category Base\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是空值（空字符串、空对象、空数组等），返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEmpty(null);\r\n *\r\n * // 字符串\r\n * isEmpty('') // -> true\r\n * isEmpty(String()) // -> true\r\n * isEmpty(' ') // -> false\r\n *\r\n * // 数组\r\n * isEmpty([]) // -> true\r\n * isEmpty([1]) // -> false\r\n *\r\n * // 对象\r\n * isEmpty(new String()) // -> true\r\n * isEmpty({}) // -> true\r\n * isEmpty({a: 1}) // -> false\r\n *\r\n * // Prototype 对象\r\n * let args\r\n * const fn = function () {arg = arguments}\r\n *\r\n * fn()\r\n *\r\n * isEmpty(fn.prototype) // -> false\r\n *\r\n * // arguments 参数\r\n * isEmpty(args) // -> true\r\n *\r\n * fn(1)\r\n *\r\n * isEmpty(args) // -> false\r\n *\r\n * // buffer\r\n * left buffer = Buffer.alloc(0)\r\n *\r\n * isEmpty(buffer) => true\r\n *\r\n * buffer = Buffer.alloc(10)\r\n *\r\n * isEmpty(buffer) => false\r\n */\r\nconst isEmpty = (val) => {\r\n  return (\r\n    isNull(val) ||\r\n    (isString(val) && val === '') ||\r\n    ((isHTMLCollection(val) || isBuffer(val) || isTypedArray(val)) &&\r\n      !val.length) ||\r\n    isEmptyArguments(val) ||\r\n    isEmptyObject(val) ||\r\n    isEmptyArray(val)\r\n  )\r\n}\r\n\r\nexport default isEmpty\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为合法的 UUID 字符串\r\n * ========================================================================\r\n * @method isUUID\r\n * @since 2.1.0\r\n * @cagetory String\r\n * @see https://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\r\n * @param {String} str - 要检测的数据\r\n * @returns {Boolean} 'str' 为合法的 UUID 字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isUUID('749d0000-0194-1005-2e05-08d61613bf2f') // -> true\r\n * isUUID('d3aa88e2-c754-41e0-8ba6-4198a34aa0a2') // -> true\r\n * isUUID('00000000-0000-0000-0000-000000000000') // -> true\r\n * isUUID('{0e40c5ab-1d9b-ee11-983e-e0be0335d021}') // -> true\r\n * isUUID('08dbe0f11c8641cf8afe6b2824e8f8f5') // -> true\r\n *\r\n * isUUID('') // -> false\r\n * isUUID('xxxA987FBC9-4BED-3078-CF07-9141BA07C9F3') // -> false\r\n * isUUID('934859') // -> false\r\n * isUUID('A987FBC94BED3078CF079141BA07C9F') // -> false\r\n */\r\nconst isUUID = (str) => {\r\n  const pattern =\r\n    /^{?([0-9a-fA-F]{8})-?(([0-9a-fA-F]{4}-?){3})([0-9a-fA-F]{12})}?$/i\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  return pattern.test(str)\r\n}\r\n\r\nexport default isUUID\r\n","import isString from './isString'\r\n\r\n/**\r\n * 验证是否为（v4 or v6） IP 地址\r\n * ========================================================================\r\n * @method isIPAddress\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 待检测的数据（字符串）\r\n * @returns {Boolean} 'val' 是 IP 地址，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // IPv4\r\n * isIPAddress('126.11.15.33') // -> true\r\n * isIPAddress('255.255.255.255') // -> true\r\n * isIPAddress('126.11.15.255') // -> false\r\n * isIPAddress('126.11.15.256') // -> false\r\n * isIPAddress('126.11.15.a56') // -> false\r\n * isIPAddress('126.11.15.') // -> false\r\n *\r\n * // IPv6\r\n * isIPAddress('FC00:0000:130F:0000:0000:09C0:876A:130B') // -> true\r\n * isIPAddress('FC00:0000:130F:0000:0000:09C0:876A:130') // -> true\r\n * isIPAddress('FC00:0000:130F:0000:0000:09C0:876A') // -> false\r\n * isIPAddress('FC00:0000:130F:0000:0000:09C0:876A:X130') // -> false\r\n */\r\nconst isIPAddress = (val) => {\r\n  const ipV6 =\r\n    /(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d)|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?\\d)?\\d)\\.){3}(25[0-5]|(2[0-4]|1?\\d)?\\d))/\r\n  const ipV4 =\r\n    /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/\r\n  return isString(val) && (ipV4.test(val) || ipV6.test(val))\r\n}\r\n\r\nexport default isIPAddress\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为 16 进制编码的字符串\r\n * ========================================================================\r\n * @method isHex\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 16 进制编码的字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isHex('#ffffff') // -> true\r\n * isHex('f3f3f3') // -> true\r\n * isHex('#h1f1f1') // -> false\r\n * isHex('h1f1x1') // -> false\r\n */\r\nconst isHex = (val) => {\r\n  const REGEXP_HEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n  return isString(val) && REGEXP_HEX.test(val)\r\n}\r\n\r\nexport default isHex\r\n","// HTML 合法的标签\r\nconst TAGS = [\r\n  'a',\r\n  'abbr',\r\n  'address',\r\n  'area',\r\n  'article',\r\n  'aside',\r\n  'audio',\r\n  'b',\r\n  'base',\r\n  'bdi',\r\n  'bdo',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'cite',\r\n  'code',\r\n  'col',\r\n  'colgroup',\r\n  'data',\r\n  'datalist',\r\n  'dd',\r\n  'del',\r\n  'details',\r\n  'dfn',\r\n  'dialog',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'em',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hgroup',\r\n  'hr',\r\n  'html',\r\n  'i',\r\n  'iframe',\r\n  'img',\r\n  'input',\r\n  'ins',\r\n  'kbd',\r\n  'label',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'map',\r\n  'mark',\r\n  'math',\r\n  'menu',\r\n  'menuitem',\r\n  'meta',\r\n  'meter',\r\n  'nav',\r\n  'noscript',\r\n  'object',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'output',\r\n  'p',\r\n  'param',\r\n  'picture',\r\n  'pre',\r\n  'progress',\r\n  'q',\r\n  'rb',\r\n  'rp',\r\n  'rt',\r\n  'rtc',\r\n  'ruby',\r\n  's',\r\n  'samp',\r\n  'script',\r\n  'search',\r\n  'section',\r\n  'select',\r\n  'slot',\r\n  'small',\r\n  'source',\r\n  'span',\r\n  'strong',\r\n  'style',\r\n  'sub',\r\n  'summary',\r\n  'sup',\r\n  'svg',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'template',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'time',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'u',\r\n  'ul',\r\n  'var',\r\n  'video',\r\n  'wbr'\r\n]\r\n\r\nexport default TAGS\r\n","import isString from './isString'\r\nimport trim from './utils/trim'\r\nimport TAGS from './enum/tags'\r\n\r\n/**\r\n * 检测测试数据是否为合法的 HTML 代码\r\n * ========================================================================\r\n * @method isHTML\r\n * @since 0.5.0\r\n * @category String\r\n * @see https://github.com/sindresorhus/html-tags\r\n * @see https://github.com/sindresorhus/is-html\r\n * @param {*} str - 要检测的数据\r\n * @returns {Boolean} 'val' 为合法的 HTML 代码，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // 包含 doctype 标签：\r\n * isHTML('<!doctype html>') // -> true\r\n * isHTML('\\n\\n<!doctype html><html>') // -> true\r\n *\r\n * // 包含：<html>，<body> 或者 <x-*> 标签：\r\n * isHTML('<html>') // -> true\r\n * isHTML('<html></html>') // -> true\r\n * isHTML('<html lang=\"en\"></html>') // -> true\r\n * isHTML('<html><body></html>') // -> true\r\n * isHTML('<html><body class=\"no-js\"></html>') // -> true\r\n * isHTML('<x-unicorn>') // -> true\r\n *\r\n * // 包含任何合法的 HTML 标签：\r\n * isHTML('<p>foo</p>') // -> true\r\n * isHTML('<a href=\"#\">foo</a>') // -> true\r\n * isHTML('<br />') // -> true\r\n *\r\n * // 无法匹配 XML 标签：\r\n * isHTML('<attribute>address</attribute>') // -> false\r\n * isHTML('<address>Wuhan City</address>') // -> false\r\n * isHTML('<age>20</age>') // -> false\r\n * isHTML('<gender>mail</gender>') // -> false\r\n * isHTML('<career>programmer</career>') // -> false\r\n */\r\nconst isHTML = (str) => {\r\n  let html\r\n  let basic\r\n  let full\r\n\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  // 为了提高性能，我们将其限制在合理的长度内。\r\n  html = trim(str).slice(0, 1000)\r\n  basic = /\\s*<!doctype html>|<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>/i\r\n  full = new RegExp(TAGS.map((tag) => `<${tag}\\\\b[^>]*>`).join('|'), 'i')\r\n\r\n  return basic.test(html) || full.test(html)\r\n}\r\n\r\nexport default isHTML\r\n","const trim = (str) => {\r\n  /* istanbul ignore else */\r\n  if (str.trim) {\r\n    return str.trim()\r\n  }\r\n\r\n  return str.replace(/^\\s+|\\s+$/g, '')\r\n}\r\n\r\nexport default trim\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否为 SVG 格式字符串\r\n * ========================================================================\r\n * @method isSVG\r\n * @since 1.11.0\r\n * @category String\r\n * @param {*} val - 要检测的（字符串）数据\r\n * @returns {boolean} - true 表示检测数据是 SVG 格式字符，否则返回 false\r\n * @example\r\n *\r\n * isSVG('<!doctype html>') // -> false\r\n *\r\n * const svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"0 0 26 28\">' +\r\n *             '<path d=\"M22 15.5v7.5c0\"></path>' +\r\n *             '</svg>'\r\n *\r\n * isSVG(svg) // -> true\r\n */\r\nconst isSVG = (val) => {\r\n  const declaration = '(?:<\\\\?xml[^>]*>\\\\s*)?'\r\n  const doctype =\r\n    '(?:<\\\\!doctype svg[^>]*\\\\s*(?:\\\\[?(?:\\\\s*<![^>]*>\\\\s*)*\\\\]?)*[^>]*>\\\\s*)?'\r\n  const content = '<svg[^>]*>[^]*<\\\\/svg>\\\\s*$'\r\n  const svg = `^\\\\s*${declaration}${doctype}${content}\\\\s*$`\r\n  const pattern = new RegExp(svg, 'i')\r\n\r\n  return isString(val) && pattern.test(val)\r\n}\r\n\r\nexport default isSVG\r\n","import isString from './isString'\r\nimport isBlank from './isBlank'\r\n\r\n/**\r\n * 检测测试数据是否为 JSON 格式字符串数据\r\n * ========================================================================\r\n * @method isJSON\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 JSON 格式字符串，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // String\r\n * isJSON('') // -> false\r\n * isJSON(\"\") // -> false\r\n * isJSON(\"json\") // -> true\r\n *\r\n * // Number\r\n * isJSON(3) // -> false\r\n * isJSON(\"3\") // -> true\r\n *\r\n * // Boolean\r\n * isJSON(false) // -> false\r\n * isJSON(\"false\") // -> true\r\n *\r\n * // Object\r\n * isJSON(null) // -> false\r\n * isJSON(\"null\") // -> true\r\n *\r\n * isJSON({ prop: 'JSON' }) // -> false\r\n * isJSON(\"{\\\"prop\\\":\\\"JSON\\\"}\") // -> true\r\n *\r\n * // Array\r\n * isJSON([1, 2, 3]) // -> false\r\n * isJSON(\"[1, 2, 3]\") // -> true\r\n */\r\nconst isJSON = (val) => {\r\n  if (!isString(val) || isBlank(val) || !val) {\r\n    return false\r\n  }\r\n\r\n  val = val.replace(/\\\\(?:([\"\\\\/bfnrt])|(u[0-9a-fA-F]{4}))/g, '@')\r\n  val = val.replace(\r\n    /\"[\\w\\s]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/g,\r\n    ']'\r\n  )\r\n  val = val.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')\r\n\r\n  return /^[\\],:{}\\s]*$/.test(val)\r\n}\r\n\r\nexport default isJSON\r\n","import isString from '../isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的时间（字符串）\r\n * ========================================================================\r\n * @method _isTime\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isTime = (str) => {\r\n  const pattern12Hours = /^(0?[1-9]|1[0-2]):[0-5]\\d(\\s(am|pm|AM|PM))?$/\r\n  const pattern24Hours = /^(0?[1-9]|2[0-3]):([0-5]\\d){1,2}$/\r\n\r\n  return isString(str) && (pattern12Hours.test(str) || pattern24Hours.test(str))\r\n}\r\n\r\nexport default _isTime\r\n","import isString from '../isString'\r\n\r\n/**\r\n * 检测测试数据是否为有效的日期（字符串）\r\n * ========================================================================\r\n * @method _isDate\r\n * @private\r\n * @param {String} str - 待检测数据（字符串）\r\n * @returns {Boolean}\r\n */\r\nconst _isDate = (str) => {\r\n  return isString(str) && !isNaN(Date.parse(str))\r\n}\r\n\r\nexport default _isDate\r\n","import _isTime from './utils/_isTime'\r\nimport _isDate from './utils/_isDate'\r\n\r\n/**\r\n * 检测测试数据是否为有效的时间（字符串）\r\n * ========================================================================\r\n * @method isTime\r\n * @since 1.4.0\r\n * @category String\r\n * @param {*} val - （必须）待测试的字符串\r\n * @param {String} [type] - 测试的时间类型：\r\n *                          time - 时间；\r\n *                          date - 日期；\r\n *                          不传 - 时间或者日期皆可\r\n * @returns {Boolean} 'val' 是有效的时间（字符串），返回 true，否则返回 false\r\n * @example\r\n *\r\n * let chinese\r\n *\r\n * // 非字符串\r\n * isTime(123) // -> false\r\n * isTime(false) // -> false\r\n * isTime(null) // -> false\r\n * isTime(chinese) // -> false\r\n * isTime(Symbol('symbol')) // -> false\r\n * isTime(BigInt(42)) // -> false\r\n * isTime({}) // -> false\r\n * isTime([]) // -> false\r\n * isTime(() => {}) // -> false\r\n *\r\n * // 字符串\r\n * isTime('time') // -> false\r\n *\r\n * // 时间\r\n * // 12小时格式时间\r\n * isTime('1:23', 'time') // -> true\r\n * isTime('01:23', 'time') // -> true\r\n * isTime('11:23 am', 'time') // -> true\r\n * isTime('11:23 AM', 'time') // -> true\r\n * isTime('11:23 pm', 'time') // -> true\r\n * isTime('5:23 PM', 'time') // -> true\r\n *\r\n * isTime('23:01 pm', 'time') // -> false\r\n *\r\n * // 24小时格式时间\r\n * isTime('3:34', 'time') // -> true\r\n * isTime('03:45', 'time') // -> true\r\n * isTime('18:16:01', 'time') // -> true\r\n * isTime('23:34:59', 'time') // -> true\r\n *\r\n * isTime('03:60', 'time') // -> false\r\n * isTime('24:01', 'time') // -> false\r\n *\r\n * // 日期\r\n * isTime('2001.01.01') // -> true\r\n * isTime('2001/01/01') // -> true\r\n * isTime('2001-01-01') // -> true\r\n * isTime('2001-01-32') // -> false\r\n * isTime('2001-13-00') // -> false\r\n *\r\n * isTime('01.01.2001') // -> true\r\n * isTime('01/11/2001') // -> true\r\n * isTime('31-12-2001') // -> true\r\n * isTime('31-13-2001') // -> false\r\n * isTime('32.12.2001') // -> false\r\n *\r\n * isTime('Jul 08 2023 11:15:11', 'date') // -> true\r\n * isTime('Jul 32 2023 11:15:34', 'date') // -> false\r\n */\r\nconst isTime = (val, type) => {\r\n  switch (type) {\r\n    case 'time':\r\n      return _isTime(val)\r\n    case 'date':\r\n      return _isDate(val)\r\n    default:\r\n      return _isTime(val) || _isDate(val)\r\n  }\r\n}\r\n\r\nexport default isTime\r\n","import isFunction from './isFunction'\r\n\r\n/**\r\n * 检测测试数据是否为 JavaScript 内置函数\r\n * ========================================================================\r\n * @method isNativeFunction\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - 要测试的函数\r\n * @returns {Boolean} - val 是内置函数，返回 true，否则返回 false;\r\n */\r\nconst isNativeFunction = (val) => {\r\n  return isFunction(val) && /\\{\\s*\\[native code\\]\\s*\\}/.test('' + val)\r\n}\r\n\r\nexport default isNativeFunction\r\n","import isFunction from './isFunction'\r\nimport isNativeFunction from './isNativeFunction'\r\n\r\n/**\r\n * 检测测试函数是否为构造函数\r\n * ========================================================================\r\n * @method isConstructor\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} fn - 要测试的（构造）函数\r\n * @returns {Boolean} - fn 是构造函数，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * const fn = function(){};\r\n * const ff = class {};\r\n * const callback = () => {}\r\n *\r\n * isConstructor(fn) // -> true\r\n * isConstructor(ff) // -> true\r\n * isConstructor(callback) // -> false\r\n * isConstructor(console.log) // -> false\r\n *\r\n * isConstructor(Math) // -> false\r\n * isConstructor(Boolean) // -> true\r\n * isConstructor(Array) // -> true\r\n * isConstructor(Function) // -> true\r\n * isConstructor(Date) // -> true\r\n * isConstructor(RegExp) // -> true\r\n * isConstructor(Object) // -> true\r\n * isConstructor(Promise) // -> true\r\n */\r\nconst isConstructor = (fn) => {\r\n  let proto = null\r\n  let constructor = null\r\n  let instance\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  proto = fn.prototype\r\n\r\n  if (!proto) {\r\n    return false\r\n  }\r\n\r\n  constructor = fn.constructor\r\n\r\n  if (\r\n    isNativeFunction(fn) &&\r\n    (constructor === fn || constructor === Function)\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  // 判断 fn 是否为 Promise 构造函数\r\n  instance = new fn()\r\n\r\n  // 判断 constructor\r\n  return (\r\n    (instance.constructor === fn && instance instanceof fn) ||\r\n    (instance.constructor === Object && instance instanceof Object)\r\n  )\r\n}\r\n\r\nexport default isConstructor\r\n","import isConstructor from './isConstructor'\r\n\r\n/**\r\n * 判断是否为 prototype 对象\r\n * ========================================================================\r\n * @method isPrototype\r\n * @since 0.2.0\r\n * @category Function\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 prototype 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const Yao= {\r\n *   age: 40,\r\n *   career: 'programmer'\r\n * }\r\n *\r\n * const Programmer = function(name, age) {\r\n *   this.name = name\r\n *   this.age = age\r\n *   this.isDead = false\r\n *\r\n *   return this\r\n * }\r\n *\r\n * Programmer.prototype.career = 'programmer'\r\n * Programmer.prototype.getWorkDone = function() {\r\n *   this.isDead = true\r\n *   return this\r\n * }\r\n *\r\n * isPrototype(null) // => false\r\n *\r\n * isPrototype(Object) // => false\r\n * isPrototype(Object.prototype) // => true\r\n *\r\n * isPrototype(Programmer) // => false\r\n * isPrototype(Yao.__proto__) // => true\r\n */\r\nconst isPrototype = (val) => {\r\n  const OP = Object.prototype\r\n  const Ctor = val ? val.constructor : null\r\n  const proto = (isConstructor(Ctor) && Ctor.prototype) || OP\r\n\r\n  return val === proto\r\n}\r\n\r\nexport default isPrototype\r\n","import hasOwn from './utils/hasOwn'\r\nimport isObject from './isObject'\r\n\r\n/**\r\n * 判断是否未 VNode 对象\r\n * =============================================================\r\n * @method isVNode\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 VNode 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * export default {\r\n *   name: 'PageHeader',\r\n *   mounted() {\r\n *     const $header = this.$refs.header\r\n *\r\n *     isVNode($header) // -> true\r\n *   }\r\n * }\r\n */\r\nconst isVNode = (val) => {\r\n  return val !== null && isObject(val) && hasOwn(val, 'componentOptions')\r\n}\r\n\r\nexport default isVNode\r\n","/**\r\n * 检测是否为 XML 文档\r\n * ========================================================================\r\n * @method isXML\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 XML 文档，返回 true，否则返回 false\r\n * @example\r\n *\r\n * import jsdom from 'jsdom'\r\n * import { DOMParser } from 'xmldom'\r\n *\r\n * const { JSDOM } = jsdom;\r\n *\r\n * const HTML = new JSDOM('<html><head><title>isXML</title></head><body><p>p1</p><p>p2</p><p>p3</p></body></html>')\r\n * const XML = new DOMParser().parseFromString(\r\n *     '<xml xmlns=\"a\" xmlns:c=\"./lite\">\\n'+\r\n *         '\\t<child>test</child>\\n'+\r\n *         '\\t<child></child>\\n'+\r\n *         '\\t<child/>\\n'+\r\n *     '</xml>','text/xml')\r\n *\r\n * isXML(XML) // -> true\r\n *\r\n * isXML('html') // -> false\r\n * isXML(HTML) // -> false\r\n */\r\nconst isXML = (val) => {\r\n  const documentElement = val && (val.ownerDocument || val).documentElement\r\n  return documentElement ? documentElement.nodeName !== 'HTML' : false\r\n}\r\n\r\nexport default isXML\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为类似数组（array、arguments 对象或者\r\n * HTMLNodeList 对象）类型。\r\n * ========================================================================\r\n * @method isArrayLike\r\n * @since 0.2.0\r\n * @category Array\r\n * @param {*} val - 要检测是的数据\r\n * @returns {Boolean} 'val' 是 array、arguments 或者 HTMLNodeList 类型返回 true，\r\n * 否则返回 false\r\n * @example\r\n *\r\n * let args\r\n *\r\n * function sum(a, b){\r\n *     args = arguments // -> true\r\n *     return a + b\r\n * }\r\n *\r\n * sum(5, 6)\r\n *\r\n * isArrayLike([1, 2, 3, 4, 5]) // -> true\r\n *\r\n * // arguments 对象是类似数组类型的数据\r\n * isArrayLike(args) // -> true\r\n *\r\n * // HTMLNodeList 是类似数组类型的数据\r\n * isArrayLike(document.getElementsByTagName('li')) // -> true\r\n *\r\n * isArrayLike({ '0': 1, '1': 2, length: 2 }) // -> false\r\n * isArrayLike( new Int8Array() ) // -> false\r\n */\r\nconst isArrayLike = (val) => {\r\n  const type = _type(val)\r\n\r\n  return (\r\n    type === TYPES.ARRAY ||\r\n    type === TYPES.ARGUMENTS ||\r\n    type === TYPES.COLLECTION\r\n  )\r\n}\r\n\r\nexport default isArrayLike\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 BigInt 类型。\r\n * ========================================================================\r\n * @method isBigInt\r\n * @since 0.6.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 BigInt 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const MAX_SAFE_INTEGER = 9007199254740991\r\n * const bigint = BigInt(MAX_SAFE_INTEGER + 1)\r\n *\r\n * isBigInt(MAX_SAFE_INTEGER) // -> false\r\n * isBigInt(bigint) // -> true\r\n */\r\nconst isBigInt = (val) => {\r\n  let bigIntValueOf\r\n\r\n  /* istanbul ignore else */\r\n  if (BigInt && typeof BigInt === TYPES.FUNCTION) {\r\n    bigIntValueOf = BigInt.prototype.valueOf\r\n  }\r\n\r\n  return (\r\n    _type(val) === TYPES.BIG_INT &&\r\n    bigIntValueOf &&\r\n    _type(bigIntValueOf.call(val)) === TYPES.BIG_INT\r\n  )\r\n}\r\n\r\nexport default isBigInt\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Boolean 类型\r\n * ========================================================================\r\n * @method isBoolean\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Boolean 类型，则返回 true，否则返回 false\r\n * @example\r\n *\r\n * let projects\r\n *\r\n * // False\r\n * isBoolean(1) // -> false\r\n * isBoolean('') // -> false\r\n * isBoolean(null) // -> false\r\n * isBoolean(NaN) // -> false\r\n * isBoolean(projects) // -> false\r\n *\r\n * // True\r\n * isBoolean(!!0) // -> true\r\n * isBoolean(false) // -> true\r\n * isBoolean(true) // -> true\r\n * isBoolean(Boolean('1')) // -> true\r\n * isBoolean(new Boolean('')) // -> false\r\n * isBoolean(!!projects) // -> true\r\n */\r\nconst isBoolean = (val) => {\r\n  return _type(val) === TYPES.BOOLEAN\r\n}\r\n\r\nexport default isBoolean\r\n","/**\r\n * 检测测试数据是否为 Window 对象\r\n * ========================================================================\r\n * @method isWindow\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 Window 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n *\r\n * Types.is($list) // -> 'element'\r\n * Types.isWindow($list) // -> false\r\n *\r\n * Types.isWindow(window) // -> true\r\n *\r\n * const nonWindowObject = {\r\n *   // 模拟部分 Window 对象的属性，但不完整\r\n *   document: {},\r\n *   location: {},\r\n *   // 缺少 alert 和 setInterval 属性\r\n * }\r\n *\r\n * Types.isWindow(nonWindowObject) // -> false\r\n *\r\n * Types.isWindow(null) // -> false\r\n */\r\nconst isWindow = (val) => {\r\n  return !!(val && val.document && val.location && val.alert && val.setInterval)\r\n}\r\n\r\nexport default isWindow\r\n","import isWindow from '../isWindow'\r\n\r\nconst getWindow = (node) => {\r\n  if (node == null) {\r\n    return window\r\n  }\r\n\r\n  if (!isWindow(node)) {\r\n    const ownerDocument = node.ownerDocument\r\n    return ownerDocument ? ownerDocument.defaultView || window : window\r\n  }\r\n\r\n  return node\r\n}\r\n\r\nexport default getWindow\r\n","import getWindow from './utils/getWindow'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 Element 实例。\r\n * ========================================================================\r\n * @method isElement\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 Element 实例，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n * const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\n *\r\n * Types.isElement(svgElement) // -> true\r\n * Types.isHTMLElement(svgElement) // -> false\r\n *\r\n * isElement($list) // -> true\r\n *\r\n * isElement($div) // -> true\r\n *\r\n * isElement($text) // -> false\r\n *\r\n * isElement($items) // -> false\r\n *\r\n * isElement($fragment) // -> false\r\n *\r\n * isElement([]) // -> false\r\n */\r\nconst isElement = (val) => {\r\n  return val instanceof getWindow(val).Element\r\n}\r\n\r\nexport default isElement\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 DocumentFragment 文档碎片。\r\n * ========================================================================\r\n * @method isFragment\r\n * @since 0.6.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 DocumentFragment 文档碎片，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n *\r\n * isFragment($list) // -> false\r\n *\r\n * isFragment($div) // -> false\r\n *\r\n * isFragment($text) // -> false\r\n *\r\n * isFragment($items) // -> false\r\n *\r\n * isFragment($items) // -> true\r\n */\r\nconst isFragment = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.FRAGMENT)\r\n}\r\n\r\nexport default isFragment\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为文本节点\r\n * ========================================================================\r\n * @method isTextNode\r\n * @since 0.2.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是文本节点，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $fragment = document.createDocumentFragment()\r\n * const $items = document.querySelectorAll('.item')\r\n * const $text = document.createTextNode('text')\r\n *\r\n * isTextNode($list) // -> false\r\n *\r\n * isTextNode($div) // -> false\r\n *\r\n * isTextNode($fragment) // -> false\r\n *\r\n * isTextNode($items) // -> false\r\n *\r\n * isTextNode($text) // -> true\r\n */\r\nconst isTextNode = (val) => {\r\n  return !!(isObject(val) && _type(val) === TYPES.TEXT && val.nodeType === 3)\r\n}\r\n\r\nexport default isTextNode\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Symbol 类型\r\n * ========================================================================\r\n * @method isSymbol\r\n * @since 0.2.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Symbol 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const sym = Symbol('foo')\r\n * const symObj = Object(sym)\r\n *\r\n * isSymbol(sym) // -> true\r\n *\r\n * isSymbol(symObj) // -> false\r\n */\r\nconst isSymbol = (val) => {\r\n  let symbolValueOf\r\n\r\n  /* istanbul ignore else */\r\n  if (typeof Symbol === 'function') {\r\n    symbolValueOf = Symbol.prototype.valueOf\r\n  }\r\n\r\n  return (\r\n    _type(val) === TYPES.SYMBOL &&\r\n    symbolValueOf &&\r\n    typeof symbolValueOf.call(val) === 'symbol'\r\n  )\r\n}\r\n\r\nexport default isSymbol\r\n","import is from '../is'\r\nimport isAlpha from '../isAlpha'\r\nimport isArguments from '../isArguments'\r\nimport isArray from '../isArray'\r\nimport isArrayBuffer from '../isArrayBuffer'\r\nimport isArrayLike from '../isArrayLike'\r\nimport isArrayLikeObject from '../isArrayLikeObject'\r\nimport isBase64 from '../isBase64'\r\nimport isBigInt from '../isBigInt'\r\nimport isBigInt64Array from '../isBigInt64Array'\r\nimport isBigUint64Array from '../isBigUint64Array'\r\nimport isBinary from '../isBinary'\r\nimport isBlank from '../isBlank'\r\nimport isBoolean from '../isBoolean'\r\nimport isBuffer from '../isBuffer'\r\nimport isConstructor from '../isConstructor'\r\nimport isChinese from '../isChinese'\r\nimport isDataView from '../isDataView'\r\nimport isDate from '../isDate'\r\nimport isDOM from '../isDOM'\r\nimport isElement from '../isElement'\r\nimport isEmail from '../isEmail'\r\nimport isEmpty from '../isEmpty'\r\nimport isEmptyArguments from '../isEmptyArguments'\r\nimport isEmptyArray from '../isEmptyArray'\r\nimport isEmptyObject from '../isEmptyObject'\r\nimport isError from '../isError'\r\nimport isEven from '../isEven'\r\nimport isFalsy from '../isFalsy'\r\nimport isFloat from '../isFloat'\r\nimport isFloat32Array from '../isFloat32Array'\r\nimport isFloat64Array from '../isFloat64Array'\r\nimport isFragment from '../isFragment'\r\nimport isFunction from '../isFunction'\r\nimport isGuid from '../isGuid'\r\nimport isHash from '../isHash'\r\nimport isHex from '../isHex'\r\nimport isHTML from '../isHTML'\r\nimport isHTMLCollection from '../isHTMLCollection'\r\nimport isHTMLElement from '../isHTMLElement'\r\nimport isIDNumber from '../isIDNumber'\r\nimport isInfinite from '../isInfinite'\r\nimport isInt8Array from '../isInt8Array'\r\nimport isInt16Array from '../isInt16Array'\r\nimport isInt32Array from '../isInt32Array'\r\nimport isInteger from '../isInteger'\r\nimport isIPAddress from '../isIPAddress'\r\nimport isJSON from '../isJSON'\r\nimport isLength from '../isLength'\r\nimport isMap from '../isMap'\r\nimport isNaN from '../isNaN'\r\nimport isNativeFunction from '../isNativeFunction'\r\nimport isNil from '../isNil'\r\nimport isNode from '../isNode'\r\nimport isNull from '../isNull'\r\nimport isNumber from '../isNumber'\r\nimport isNumeric from '../isNumeric'\r\nimport isObject from '../isObject'\r\nimport isObjectLike from '../isObjectLike'\r\nimport isOdd from '../isOdd'\r\nimport isPhoneNumber from '../isPhoneNumber'\r\nimport isPlainObject from '../isPlainObject'\r\nimport isPrime from '../isPrime'\r\nimport isPrimitive from '../isPrimitive'\r\nimport isPromise from '../isPromise'\r\nimport isPrototype from '../isPrototype'\r\nimport isRegExp from '../isRegExp'\r\nimport isSafeInteger from '../isSafeInteger'\r\nimport isSet from '../isSet'\r\nimport isShadowRoot from '../isShadowRoot'\r\nimport isStream from '../isStream'\r\nimport isString from '../isString'\r\nimport isSVG from '../isSVG'\r\nimport isSymbol from '../isSymbol'\r\nimport isTextNode from '../isTextNode'\r\nimport isTime from '../isTime'\r\nimport isTruly from '../isTruly'\r\nimport isTypedArray from '../isTypedArray'\r\nimport isUint8Array from '../isUint8Array'\r\nimport isUint8ClampedArray from '../isUint8ClampedArray'\r\nimport isUint16Array from '../isUint16Array'\r\nimport isUint32Array from '../isUint32Array'\r\nimport isUndefined from '../isUndefined'\r\nimport isURL from '../isURL'\r\nimport isUUID from '../isUUID'\r\nimport isValue from '../isValue'\r\nimport isVNode from '../isVNode'\r\nimport isWeakMap from '../isWeakMap'\r\nimport isWeakSet from '../isWeakSet'\r\nimport isWindow from '../isWindow'\r\nimport isXML from '../isXML'\r\n\r\nconst METHODS = {\r\n  is,\r\n  isAlpha,\r\n  isArguments,\r\n  isArray,\r\n  isArrayBuffer,\r\n  isArrayLike,\r\n  isArrayLikeObject,\r\n  isBase64,\r\n  isBigInt,\r\n  isBigInt64Array,\r\n  isBigUint64Array,\r\n  isBinary,\r\n  isBlank,\r\n  isBoolean,\r\n  isBuffer,\r\n  isChinese,\r\n  isConstructor,\r\n  isDataView,\r\n  isDate,\r\n  isDOM,\r\n  isElement,\r\n  isEmail,\r\n  isEmpty,\r\n  isEmptyArguments,\r\n  isEmptyArray,\r\n  isEmptyObject,\r\n  isError,\r\n  isEven,\r\n  isFalsy,\r\n  isFloat,\r\n  isFloat32Array,\r\n  isFloat64Array,\r\n  isFragment,\r\n  isFunction,\r\n  isGuid,\r\n  isHash,\r\n  isHex,\r\n  isHTML,\r\n  isHTMLCollection,\r\n  isHTMLElement,\r\n  isIDNumber,\r\n  isInfinite,\r\n  isInt8Array,\r\n  isInt16Array,\r\n  isInt32Array,\r\n  isInteger,\r\n  isIPAddress,\r\n  isJSON,\r\n  isLength,\r\n  isMap,\r\n  isNaN,\r\n  isNativeFunction,\r\n  isNil,\r\n  isNode,\r\n  isNull,\r\n  isNumber,\r\n  isNumeric,\r\n  isObject,\r\n  isObjectLike,\r\n  isOdd,\r\n  isPhoneNumber,\r\n  isPlainObject,\r\n  isPrime,\r\n  isPrimitive,\r\n  isPromise,\r\n  isPrototype,\r\n  isRegExp,\r\n  isSafeInteger,\r\n  isSet,\r\n  isShadowRoot,\r\n  isStream,\r\n  isString,\r\n  isSVG,\r\n  isSymbol,\r\n  isTextNode,\r\n  isTime,\r\n  isTruly,\r\n  isTypedArray,\r\n  isUint8Array,\r\n  isUint8ClampedArray,\r\n  isUint16Array,\r\n  isUint32Array,\r\n  isUndefined,\r\n  isURL,\r\n  isUUID,\r\n  isValue,\r\n  isVNode,\r\n  isWeakMap,\r\n  isWeakSet,\r\n  isWindow,\r\n  isXML\r\n}\r\n\r\nexport default METHODS\r\n","import _type from './utils/_type'\r\nimport typeOfNumber from './utils/typeOfNumber'\r\nimport typeOfString from './utils/typeOfString'\r\nimport typeOfObject from './utils/typeOfObject'\r\n\r\n/**\r\n * 检测数据类型，返回检测数据类型的字符串\r\n * ========================================================================\r\n * @method is\r\n * @since 0.2.0\r\n * @category Base\r\n * @param {*} val - 待检测的数据\r\n * @returns {String} 返回确切的数据类型名称\r\n * @example\r\n *\r\n * // 基础值类型\r\n * is('js') // -> string\r\n * is(' ') // -> blank\r\n * is('Z29vZA==') // -> base64\r\n * is('中国梦') // -> chinese\r\n * is('type.js@gmail.com') // -> email\r\n * is('') // -> empty\r\n * is('3C8021B0-423D-475D-BECF-63ED5ED34563') // -> guid\r\n * is('3C8021B0423D475DBECF63ED5ED34563') // -> guid\r\n * is('110105491231002') // -> ID number\r\n * is('11010519491231002X') // -> ID number\r\n * is('#ffffff') // -> hex\r\n * is('<h2>中国梦</h2>') // -> html\r\n * is('126.11.15.255') // -> IP address\r\n * is('{\"prop\":\"JSON\"}') // -> json\r\n * is('11:23 am') // -> time\r\n * is('Jul 08 2023') // -> time\r\n * is(2023) // -> integer\r\n * is(3.0) // -> integer\r\n * is(3.01) // -> float\r\n * is(Infinity) // -> infinite\r\n * is(true) // -> boolean\r\n * is(null) // -> null\r\n * is(Example) // -> undefined\r\n * is(Symbol()) // -> symbol\r\n * is(BigInt(42)) // -> bigint\r\n *\r\n * // Set/WeakSet/Map/WeakMap\r\n * is(new Set()) // -> set\r\n * is(new WeakSet()) // -> weakset\r\n * is(new Map()) // -> map\r\n * is(new WeakMap()) // -> weakmap\r\n *\r\n * // Object 对象相关\r\n * is({}) // -> object\r\n * is(new Object()) // -> object\r\n * is(Object.prototype) // -> prototype\r\n * is(XML) // -> xml\r\n * is(Object.create(null)) // -> object\r\n * is(new String()) // -> object\r\n * is(new Number()) // -> object\r\n * is(new Boolean()) // -> object\r\n * is(new Error()) // -> error\r\n * is(new Date()) // -> data\r\n * is(new RegExp('/s/')) // -> regexp\r\n * is(/\\s+/ig) // -> regexp\r\n * is(() => {}) // -> function\r\n * is(args) // -> arguments\r\n * is(dv) // -> dataview\r\n * is(document.querySelector('#list')) // -> element\r\n * is(document.querySelectorAll('.item')) // -> coolection\r\n * is(document.createTextNode('text')) // -> text\r\n * is(document.createDocumentFragment()) // -> fragment\r\n *\r\n * // Array 相关\r\n * is([]) // -> array\r\n * is(new ArrayBuffer(8)) // -> arraybubber\r\n * is(new Int8Array([])) // -> int8array\r\n * is(new Int16Array([])) // -> int16array\r\n * is(new Int32Array([])) // -> int32array\r\n * is(new Uint8Array([])) // -> uint8array\r\n * is(new Uint8ClampedArray([])) // -> uint8clampedarray\r\n * is(new Uint16Array([])) // -> uint16array\r\n * is(new Uint32Array([])) // -> uint32array\r\n * is(new Float32Array([])) // -> float32array\r\n * is(new Float64Array([])) // -> float64array\r\n * is(new BigInt64Array(64)) // -> bigint64array\r\n * is(new BigUint64Array(64)) // -> biguint64array\r\n */\r\nconst is = (val) => {\r\n  const type = _type(val)\r\n  let name\r\n\r\n  switch (type) {\r\n    case 'number':\r\n      name = typeOfNumber(val)\r\n      break\r\n    case 'string':\r\n      name = typeOfString(val)\r\n      break\r\n    case 'object':\r\n      name = typeOfObject(val)\r\n      break\r\n    default:\r\n      name = type\r\n      break\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default is\r\n","import isInteger from '../isInteger'\r\nimport isFloat from '../isFloat'\r\nimport isInfinite from '../isInfinite'\r\n\r\n/**\r\n * （私有方法）获取确切的数值类型\r\n * ========================================================================\r\n * @method typeOfNumber\r\n * @private\r\n * @param {Number} val - 要检测的数值\r\n * @returns {String} - 返回数值类型：integer、float、infinite\r\n */\r\nconst typeOfNumber = (val) => {\r\n  let name = 'number'\r\n\r\n  if (isInteger(val)) {\r\n    name = 'integer'\r\n  } else if (isFloat(val)) {\r\n    name = 'float'\r\n  } else if (isInfinite(val)) {\r\n    name = 'infinite'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default typeOfNumber\r\n","import isBlank from '../isBlank'\r\nimport isBase64 from '../isBase64'\r\nimport isChinese from '../isChinese'\r\nimport isIDNumber from '../isIDNumber'\r\nimport isEmail from '../isEmail'\r\nimport isEmpty from '../isEmpty'\r\nimport isUUID from '../isUUID'\r\nimport isIPAddress from '../isIPAddress'\r\nimport isHex from '../isHex'\r\nimport isHTML from '../isHTML'\r\nimport isSVG from '../isSVG'\r\nimport isJSON from '../isJSON'\r\nimport isTime from '../isTime'\r\n\r\n/**\r\n * （私有方法）获取确切的字符串类型\r\n * ========================================================================\r\n * @method typeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回字符串类型：blank、chinese、email、empty... 等等\r\n */\r\nconst typeOfString = (val) => {\r\n  let name = 'string'\r\n\r\n  if (isEmpty(val)) {\r\n    name = 'empty'\r\n  } else if (isBlank(val)) {\r\n    name = 'blank'\r\n  } else if (isUUID(val)) {\r\n    name = 'guid'\r\n  } else if (isBase64(val)) {\r\n    name = 'base64'\r\n  } else if (isChinese(val)) {\r\n    name = 'chinese'\r\n  } else if (isIDNumber(val)) {\r\n    name = 'ID number'\r\n  } else if (isEmail(val)) {\r\n    name = 'email'\r\n  } else if (isIPAddress(val)) {\r\n    name = 'IP address'\r\n  } else if (isHex(val)) {\r\n    name = 'hex'\r\n  } else if (isHTML(val)) {\r\n    if (isSVG(val)) {\r\n      name = 'svg'\r\n    } else {\r\n      name = 'html'\r\n    }\r\n  } else if (isJSON(val)) {\r\n    name = 'json'\r\n  } else if (isTime(val)) {\r\n    name = 'time'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default typeOfString\r\n","import isPrototype from '../isPrototype'\r\nimport isVNode from '../isVNode'\r\nimport isXML from '../isXML'\r\n\r\n/**\r\n * （私有方法）获取确切的对象类型\r\n * ========================================================================\r\n * @method _getExactTypeOfString\r\n * @private\r\n * @param {String} val - 要检测的字符串\r\n * @returns {String} 返回对象类型：prototype、vnode、xml\r\n */\r\nconst typeOfObject = (val) => {\r\n  let name = 'object'\r\n\r\n  if (isXML(val)) {\r\n    name = 'xml'\r\n  } else if (isVNode(val)) {\r\n    name = 'vnode'\r\n  } else if (isPrototype(val)) {\r\n    name = 'prototype'\r\n  }\r\n\r\n  return name\r\n}\r\n\r\nexport default typeOfObject\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否仅包含英文字符\r\n * ========================================================================\r\n * @method isAlpha\r\n * @since 2.1.0\r\n * @category String\r\n * @param {*} str - 要检测的数据\r\n * @returns {Boolean} 'str' 仅包含英文字符，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isAlpha('aaa') // -> true\r\n * isAlpha('good') // -> true\r\n *\r\n * isAlpha('ok!') // -> false\r\n * isAlpha('is alpha') // -> false\r\n */\r\nconst isAlpha = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n\r\n  return /^[a-zA-Z]*$/.test(str)\r\n}\r\n\r\nexport default isAlpha\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 ArrayBuffer 类型\r\n * ========================================================================\r\n * @method isArrayBuffer\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val\r\n * @return {Boolean} ‘val’ 是 isArrayBuffer 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isArrayBuffer([]) // -> false\r\n * isArrayBuffer(new ArrayBuffer(8)) // -> true\r\n */\r\nfunction isArrayBuffer(val) {\r\n  return _type(val) === TYPES.ARRAY_BUFFER\r\n}\r\n\r\nexport default isArrayBuffer\r\n","import isArrayLike from './isArrayLike'\r\nimport isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据是否为 ArrayLike 的对象数据\r\n * ========================================================================\r\n * @method isArrayLikeObject\r\n * @since 0.2.0\r\n * @category Array\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} ‘val’ 是类似 Array 类型对象，返回 true，否则返回 false;\r\n * @example\r\n *\r\n * const $items = document.querySelectorAll('.item')\r\n * const obj = { '0': 1, '1': 2, length: 2 }\r\n * let args\r\n *\r\n * function getAge(age) {\r\n *   args = arguments\r\n *   return age + 18\r\n * }\r\n *\r\n * getAge(30)\r\n *\r\n * isArrayLikeObject([]) // -> true\r\n *\r\n * isArrayLikeObject($items) // -> true\r\n *\r\n * isArrayLikeObject(args) // -> true\r\n *\r\n * isArrayLikeObject(obj) // -> false\r\n *\r\n * isArrayLikeObject({}) // -> false\r\n */\r\nconst isArrayLikeObject = (val) => {\r\n  return isObjectLike(val) && isArrayLike(val)\r\n}\r\n\r\nexport default isArrayLikeObject\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 BigInt64Array 类型。\r\n * ========================================================================\r\n * @method isBigInt64Array\r\n * @since 0.6.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 BigInt64Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const arr = [9007199254740992]\r\n * cong bigint64 = new BigInt64Array(42)\r\n *\r\n * isBigInt64Array(arr) // -> false\r\n * isBigInt64Array(bigint64) // -> true\r\n */\r\nconst isBigInt64Array = (val) => {\r\n  return _type(val) === TYPES.BIG_INT64_ARRAY\r\n}\r\n\r\nexport default isBigInt64Array\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 BigUint64Array 类型。\r\n * ========================================================================\r\n * @method isBigUint64Array\r\n * @since 0.6.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 BigUint64Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const arr = [9007199254740992]\r\n * cong bigint64 = new BigInt64Array(42)\r\n *\r\n * isBigUint64Array(arr) // -> false\r\n * isBigUint64Array(bigint64) // -> true\r\n */\r\nconst isBigUint64Array = (val) => {\r\n  return _type(val) === TYPES.BIG_UINT64_ARRAY\r\n}\r\n\r\nexport default isBigUint64Array\r\n","import isBuffer from './isBuffer'\r\nimport isString from './isString'\r\n\r\n/**\r\n * isBinary(val) 方法用来检测测试数据是二进制（字符串）数据。\r\n * ========================================================================\r\n * @method isBinary\r\n * @since 1.11.0\r\n * @param {*} buffer\r\n * @returns {Boolean}\r\n * @example\r\n *\r\n * const buffer = Buffer.alloc(15)\r\n *\r\n * isBinary('Z29vZA==') // -> false\r\n * isBinary(isArrayBuffer(8)) // -> false\r\n *\r\n * isBinary(buffer) // -> true\r\n * isBinary(buffer.toString()) // -> true\r\n */\r\nconst isBinary = (buffer) => {\r\n  let i\r\n\r\n  if (!isBuffer(buffer) && !isString(buffer)) {\r\n    return false\r\n  }\r\n\r\n  for (i = 0; i < 24; i += 1) {\r\n    const charCode = isBuffer(buffer) ? buffer[i] : buffer.charCodeAt(i)\r\n\r\n    if (charCode === 65533 || charCode <= 8) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport default isBinary\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 DataView 类型\r\n * ========================================================================\r\n * @method isDataView\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 DataView 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const buffer = new ArrayBuffer(8)\r\n * const dv = new DataView(buffer)\r\n *\r\n * isDataView(buffer) // -> false\r\n * isDataView(dv) // -> true\r\n */\r\nconst isDataView = (val) => {\r\n  return _type(val) === TYPES.DATA_VIEW\r\n}\r\n\r\nexport default isDataView\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 Date 类型\r\n * ========================================================================\r\n * @method isDate\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 Date 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const time = new Date()\r\n *\r\n * isDate(time) // -> true\r\n * isDate('2017-07-06') // -> false\r\n * isDate(time.getFullYear()) // -> false\r\n */\r\nconst isDate = (val) => {\r\n  return (\r\n    _type(val) === TYPES.DATE &&\r\n    val.toString() !== 'Invalid Date' &&\r\n    !isNaN(val)\r\n  )\r\n}\r\n\r\nexport default isDate\r\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\n/**\r\n * 检测测试数据是否为 Element 类型数据：Element 节点，TextNode，NodeList 和 DocumentFragment）。\r\n * ========================================================================\r\n * @method isDOM\r\n * @since 1.9.0\r\n * @category Element\r\n * @param {*} el\r\n * @returns {Boolean}\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $fragment = document.createDocumentFragment()\r\n * const $items = document.querySelectorAll('.item')\r\n * const $text = document.createTextNode('text')\r\n *\r\n * isDOM($list) // -> true\r\n *\r\n * isDOM($fragment) // -> true\r\n *\r\n * isDOM($items) // -> true\r\n *\r\n * isDOM($text) // -> true\r\n */\r\nconst isDOM = (el) => {\r\n  return (\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Error 类型\r\n * ========================================================================\r\n * @method isError\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Error 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const error = function Error(){}\r\n *\r\n * isError(new error()) // -> false\r\n * isError(new Error()) // -> true\r\n */\r\nconst isError = (val) => {\r\n  return _type(val) === TYPES.ERROR\r\n}\r\n\r\nexport default isError\r\n","import isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为偶数\r\n * ========================================================================\r\n * @method isEven\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是偶数，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isEven(2) // -> true\r\n * isEven(2.0) // -> true\r\n * isEven('2') // -> false\r\n *\r\n * isEven(3) // -> false\r\n * isEven(2.2) // -> false\r\n */\r\nconst isEven = (val) => {\r\n  return isInteger(val) && val % 2 === 0\r\n}\r\n\r\nexport default isEven\r\n","/**\r\n * 检测测试数据是否为在布尔上下文中被视为 false 的值\r\n * ========================================================================\r\n * @method isFalsy\r\n * @since 2.7.0\r\n * @category Base\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 在布尔上下文中被视为 true 的值，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isFalsy(false) // true\r\n * isFalsy(0) // true\r\n * isFalsy('') // true\r\n * isFalsy(null) // true\r\n * isFalsy(undefined) // true\r\n * isFalsy(NaN) // true\r\n *\r\n * isFalsy(true) // false\r\n * isFalsy(1) // false\r\n * isFalsy('hello') // false\r\n * isFalsy({}) // false\r\n * isFalsy([]) // false\r\n */\r\nconst isFalsy = (val) => {\r\n  return !val\r\n}\r\n\r\nexport default isFalsy\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Float32Array 的数组\r\n * ========================================================================\r\n * @method isFloat32Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Float64Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isFloat32Array(numbers) // -> false\r\n * isFloat32Array(new Array(32)) // -> false\r\n * isFloat32Array(args) // -> false\r\n * isFloat32Array(new Float32Array()) => true\r\n */\r\nconst isFloat32Array = (val) => {\r\n  return _type(val) === TYPES.FLOAT32_ARRAY\r\n}\r\n\r\nexport default isFloat32Array\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Float64Array 的数组\r\n * ========================================================================\r\n * @method isFloat64Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {Boolean} 'val' 是 Float64Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isFloat64Array(numbers) // -> false\r\n * isFloat64Array(new Array(32)) // -> false\r\n * isFloat64Array(args) // -> false\r\n * isFloat64Array(new Float64Array()) => true\r\n */\r\nconst isFloat64Array = (val) => {\r\n  return _type(val) === TYPES.FLOAT64_ARRAY\r\n}\r\n\r\nexport default isFloat64Array\r\n","import isUUID from './isUUID'\r\n\r\nconst isGuid = isUUID\r\n\r\nexport default isGuid\r\n","import isPlainObject from './isPlainObject'\r\n\r\nconst isHash = (obj) => {\r\n  return isPlainObject(obj)\r\n}\r\n\r\nexport default isHash\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\nimport isObjectLike from './isObjectLike'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为 HTML 元素节点。\r\n * ========================================================================\r\n * @method isHTMLElement\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 为 HTML 元素节点，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const $list = document.getElementById('list')\r\n * const $div = document.createElement('div')\r\n * const $text = document.createTextNode('text')\r\n * const $items = document.querySelectorAll('.item')\r\n * const $fragment = document.createDocumentFragment()\r\n *\r\n * isElement($list) // -> true\r\n *\r\n * isElement($div) // -> true\r\n *\r\n * isElement($text) // -> false\r\n *\r\n * isElement($items) // -> false\r\n *\r\n * isElement($fragment) // -> false\r\n */\r\nconst isHTMLElement = (val) => {\r\n  return isObjectLike(val) && val.nodeType === 1 && _type(val) === TYPES.ELEMENT\r\n}\r\n\r\nexport default isHTMLElement\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Int8Array 的数组\r\n * ========================================================================\r\n * @method isInt8Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Int32Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isInt8Array([]) // -> false\r\n * isInt8Array(new Array(8)) // -> false\r\n * isInt8Array(new Int8Array([])) // -> true\r\n */\r\nconst isInt8Array = (val) => {\r\n  return _type(val) === TYPES.INT8_ARRAY\r\n}\r\n\r\nexport default isInt8Array\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Int16Array 的数组\r\n * ========================================================================\r\n * @method isInt16Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Int32Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isInt16Array(numbers) // -> false\r\n * isInt16Array(new Array(16)) // -> false\r\n * isInt16Array(args) // -> false\r\n * isInt16Array(new Int16Array()) => true\r\n */\r\nconst isInt16Array = (val) => {\r\n  return _type(val) === TYPES.INT16_ARRAY\r\n}\r\n\r\nexport default isInt16Array\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Int32Array 的数组\r\n * ========================================================================\r\n * @method isInt32Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Int32Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isInt32Array(numbers) // -> false\r\n * isInt32Array(new Array(32)) // -> false\r\n * isInt32Array(args) // -> false\r\n * isInt32Array(new Int32Array()) => true\r\n */\r\nconst isInt32Array = (val) => {\r\n  return _type(val) === TYPES.INT32_ARRAY\r\n}\r\n\r\nexport default isInt32Array\r\n","import isNumber from './isNumber'\r\n/**\r\n * 检测测试数据是否为有效 length 值\r\n * =============================================================\r\n * @method isLength\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {Number} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是有效 length 值，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // True\r\n * isLength(256) // -> true\r\n * isLength(0x00ff11) // -> true\r\n * isLength(9007199254740991) // -> true\r\n *\r\n * // False\r\n * isLength(9007199254740992) // -> false\r\n * isLength(Infinity) // -> false\r\n * isLength(-1) // -> false\r\n */\r\nconst isLength = (val) => {\r\n  const MAX_SAFE_INTEGER = 9007199254740991\r\n\r\n  return isNumber(val) && val > -1 && val % 1 === 0 && val <= MAX_SAFE_INTEGER\r\n}\r\n\r\nexport default isLength\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Map 类型\r\n * ========================================================================\r\n * @method isMap\r\n * @since 0.2.0\r\n * @cagegory Keyed Collections\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Map 类型，返回 true，否则返回 false\r\n */\r\nconst isMap = (val) => {\r\n  return _type(val) === TYPES.MAP\r\n}\r\n\r\nexport default isMap\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为 NaN\r\n * ========================================================================\r\n * @method isNaN\r\n * @since 2.7.0\r\n * @category Number\r\n * @see https://mdn.io/Number/isNaN\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 NaN，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isNaN(NaN) // => true\r\n *\r\n * isNaN(new Number(NaN)) // => true\r\n *\r\n * isNaN(undefined) // => true\r\n *\r\n * isNaN(undefined) // => false\r\n */\r\nconst isNaN = (val) => {\r\n  return isNumber(val) && val != +val\r\n}\r\n\r\nexport default isNaN\r\n","/**\r\n * 检测测试数据是否为 Null 或者 undefined\r\n * ========================================================================\r\n * @method isNil\r\n * @since 2.7.0\r\n * @category Base\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Null 或者 undefined，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isNil(null) // => true\r\n *\r\n * isNil(void 0) // => true\r\n *\r\n * isNil(NaN) // => false\r\n */\r\nconst isNil = (val) => {\r\n  return val == null\r\n}\r\n\r\nexport default isNil\r\n","import getWindow from './utils/getWindow'\r\n\r\n/**\r\n * 检测测试数据是否为 Node 实例\r\n * ========================================================================\r\n * @method isNode\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 Node 实例，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isNode(document.createElement('div')) // -> true\r\n *\r\n * isNode(document.createTextNode('text')) // -> true\r\n *\r\n * isNode(document.createDocumentFragment()) // -> true\r\n *\r\n * isNode(document.createElementNS('http://www.w3.org/2000/svg', 'svg')) // -> true\r\n *\r\n * isNode({}) // -> false\r\n */\r\nconst isNode = (val) => {\r\n  return val instanceof getWindow(val).Node\r\n}\r\n\r\nexport default isNode\r\n","import isNumber from './isNumber'\r\nimport isString from './isString'\r\n\r\n/**\r\n * 检测测试数据是否是一个数字（只能是 number 类型或者 '123123' 这样的数字字符串）\r\n * ========================================================================\r\n * @method isNumeric\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是一个数字，返回 true，否则返回false\r\n * @example\r\n *\r\n * isNumeric(2) // -> true\r\n * isNumeric(2.4) // -> true\r\n * isNumeric(-2) // -> true\r\n * isNumeric(0xffffff) // -> true\r\n * isNumeric(3.1415926E8) // -> true\r\n * isNumeric('33') // -> true\r\n * isNumeric('0xffffff') // -> true\r\n *\r\n * isNumeric(NaN) // -> false\r\n * isNumeric(Infinity) // -> false\r\n * isNumeric(-Infinity) // -> false\r\n */\r\nconst isNumeric = (val) => {\r\n  return (isNumber(val) || isString(val)) && !isNaN(val - parseFloat(val))\r\n}\r\n\r\nexport default isNumeric\r\n","import isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据的数据类型是否为奇数\r\n * ========================================================================\r\n * @method isOdd\r\n * @since 0.2.0\r\n * @category Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是奇数，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isOdd(3) // -> true\r\n * isOdd(3.0) // -> true\r\n * isOdd(3.01E2) // -> true\r\n * isOdd(0x000011) // -> true\r\n *\r\n * isOdd(2.0) // -> false\r\n * isOdd('2') // -> false\r\n * isOdd(3.01E3) // -> false\r\n * isOdd(0x000010) // -> false\r\n * isOdd(NaN) // -> false\r\n * isOdd(Infinity) // -> false\r\n */\r\nconst isOdd = (val) => {\r\n  return isInteger(val) && val % 2 !== 0\r\n}\r\n\r\nexport default isOdd\r\n","import isString from './isString'\r\n\r\n/**\r\n * 检测是否为电话号码\r\n * ========================================================================\r\n * @method isPhoneNumber\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 电话号码 格式，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // 移动电话号码\r\n * isPhoneNumber(13901030304) // -> false\r\n * isPhoneNumber('1390103030a') // => false\r\n *\r\n * isPhoneNumber('+86 13901030304')\r\n * isPhoneNumber('13901030304')\r\n * isPhoneNumber('139-010-30304')\r\n * isPhoneNumber('139.010.30304')\r\n *\r\n * // 固定电话号码\r\n * isPhoneNumber('+86 84923296') // -> true\r\n * isPhoneNumber('027 84923296') // -> true\r\n * isPhoneNumber('(027) 84923296') // -> true\r\n * isPhoneNumber('(027)84923296') // -> true\r\n * isPhoneNumber('027-84923296') // -> true\r\n * isPhoneNumber('027.84923296') // -> true\r\n * isPhoneNumber('027 849-23296') // -> true\r\n * isPhoneNumber('027-849-23296') // -> true\r\n */\r\nconst isPhoneNumber = (val) => {\r\n  const pattern =\r\n    /^\\+?\\(?(\\d{2,3})?\\)?[-\\s.]?((\\d{3}[-\\s.]?\\d{4,6})|(\\d{11}))$/im\r\n  return isString(val) && pattern.test(val)\r\n}\r\n\r\nexport default isPhoneNumber\r\n","import isNumber from './isNumber'\r\n\r\n/**\r\n * 检测测试数据是否为质(素)数\r\n * ========================================================================\r\n * @method isPrime\r\n * @since 2.1.0\r\n * @cagetory Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是质(素)数，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isPrime(3) // -> true\r\n * isPrime(7) // -> true\r\n * isPrime(11) // -> true\r\n *\r\n * isPrime(0) // -> false\r\n * isPrime(1) // -> false\r\n * isPrime(2) // -> false\r\n * isPrime(9) // -> false\r\n */\r\nconst isPrime = (val) => {\r\n  let boundary\r\n  let i\r\n\r\n  if (!isNumber(val)) {\r\n    return false\r\n  }\r\n\r\n  boundary = Math.floor(Math.sqrt(num))\r\n  i = 2\r\n\r\n  for (; i <= boundary; i += 1) {\r\n    if (num % i === 0) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return num >= 2\r\n}\r\n\r\nexport default isPrime\r\n","import isBoolean from './isBoolean'\r\nimport isString from './isString'\r\nimport isNumber from './isNumber'\r\nimport isNull from './isNull'\r\nimport isUndefined from './isUndefined'\r\nimport isSymbol from './isSymbol'\r\nimport isBigInt from './isBigInt'\r\n\r\n/**\r\n * 检测测试数据是否为原始值类型\r\n * ========================================================================\r\n * @method isPrimitive\r\n * @since 2.6.0\r\n * @category Primitive Values\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} - 'val' 是原始值类型，返回 true，否则返回 false\r\n * @exammple\r\n *\r\n * let num\r\n * const MAX_SAFE_INTEGER = 9007199254740991\r\n * const bigint = BigInt(MAX_SAFE_INTEGER + 1)\r\n *\r\n * // True\r\n * isPrimitive(1) // -> true\r\n * isPrimitive('num') // -> true\r\n * isPrimitive(false) // -> true\r\n * isPrimitive(null) // -> true\r\n * isPrimitive(num) // -> true\r\n * isPrimitive(Symbol('foo')) // -> true\r\n * isPrimitive(bigint) // -> true\r\n *\r\n * // False\r\n * isPrimitive([]) // -> false\r\n * isPrimitive({}) // -> false\r\n * isPrimitive(()=>{}) // -> false\r\n */\r\nconst isPrimitive = (val) => {\r\n  return (\r\n    isString(val) ||\r\n    isNumber(val) ||\r\n    isNull(val) ||\r\n    isBoolean(val) ||\r\n    isUndefined(val) ||\r\n    isSymbol(val) ||\r\n    isBigInt(val)\r\n  )\r\n}\r\n\r\nexport default isPrimitive\r\n","import _type from './utils/_type'\r\nimport isObject from './isObject'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测数据是否为 Promise 对象\r\n * ========================================================================\r\n * @method isPromise\r\n * @since 1.3.0\r\n * @category Object\r\n * @param {*} val - 测试数据\r\n * @returns {Boolean} 'val' 是 Promise 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const resolve = Promise.resolve\r\n * const reject = Promise.reject\r\n * const request = new Promise((resolve, reject) => {})\r\n * let val\r\n *\r\n * // 非对象参数\r\n * isPrototype(null) // => false\r\n * isPrototype(val) // => false\r\n * isPrototype('') // => false\r\n * isPrototype(12) // => false\r\n * isPrototype(false) // => false\r\n * isPrototype(BigInt(12)) // => false\r\n * isPrototype(Symbol('prop')) // => false\r\n *\r\n *\r\n * // 对象参数\r\n * isPrototype([]]) // => false\r\n * isPrototype({}) // => false\r\n * isPrototype(class {}) // => false\r\n * isPrototype(() => {}) // => false\r\n *\r\n * isPrototype(request) // => true\r\n * isPrototype(Promise.all([resolve, resolve]) // => true\r\n * isPrototype(Promise.any([resolve, reject]) // => true\r\n * isPrototype(resolve) // => true\r\n */\r\nconst isPromise = (val) => {\r\n  return isObject(val) && _type(val) === TYPES.PROMISE\r\n}\r\n\r\nexport default isPromise\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为正则表达式\r\n * ========================================================================\r\n * @method isRegExp\r\n * @since 0.2.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是正则表达式，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const patternOne = new RegExp('\\\\s+','ig')\r\n * const patternTwo = /\\s+/ig\r\n * const patternStr = '/\\\\s+/ig'\r\n *\r\n * Types.isRegExp(patternOne) // -> true\r\n *\r\n * Types.isRegExp(patternTwo) // -> true\r\n *\r\n * Types.isRegExp(patternStr) // -> false\r\n */\r\nconst isRegExp = (val) => {\r\n  return _type(val) === TYPES.REGEXP\r\n}\r\n\r\nexport default isRegExp\r\n","import isInteger from './isInteger'\r\n\r\n/**\r\n * 检测测试数据是否为安全的 Integer 值\r\n * ========================================================================\r\n * @method isSafeInteger\r\n * @since 2.7.0\r\n * @category Number\r\n * @param {*} val - 要检测的数据\r\n * @returns {boolean} 'val' 是安全的 Integer 值，返回 true，否则返回 false\r\n * @example\r\n *\r\n * isSafeInteger(3) // => true\r\n *\r\n * isSafeInteger(Number.MIN_VALUE) // => false\r\n *\r\n * isSafeInteger(Infinity) // => false\r\n *\r\n * isSafeInteger('3') // => false\r\n */\r\nconst isSafeInteger = (val) => {\r\n  const MAX_SAFE_INTEGER = 9007199254740991\r\n  return isInteger(val) && val >= -MAX_SAFE_INTEGER && val <= MAX_SAFE_INTEGER\r\n}\r\n\r\nexport default isSafeInteger\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Set 类型\r\n * ========================================================================\r\n * @method isSet\r\n * @since 0.2.0\r\n * @cagegory Keyed Collections\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Set 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const set = new Set([1, 2, 3, 4])\r\n * const arr = [1, 2, 3, 4]\r\n *\r\n * isSet(set) // -> true\r\n *\r\n * isSet(arr) // -> false\r\n */\r\nconst isSet = (val) => {\r\n  return _type(val) === TYPES.SET\r\n}\r\n\r\nexport default isSet\r\n","import getWindow from './utils/getWindow'\r\n\r\n/**\r\n * 检测测试数据是否为 ShadowRoot 对象\r\n * ========================================================================\r\n * @method isShadowRoot\r\n * @since 2.7.0\r\n * @category Element\r\n * @param {*} val - 要检测的数据\r\n * @return {Boolean} 'val' 是 ShadowRoot 对象，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // 测试 ShadowRoot 未定义的情况\r\n * const originalShadowRoot = global.ShadowRoot\r\n *\r\n * // 临时将 ShadowRoot 设置为 undefined\r\n * global.ShadowRoot = undefined\r\n * isShadowRoot({}) // -> false\r\n *\r\n * // 恢复原始的 ShadowRoot\r\n * global.ShadowRoot = originalShadowRoot\r\n *\r\n * // 测试传入真正的 ShadowRoot 实例\r\n * const div = document.createElement('div')\r\n * const shadowRoot = div.attachShadow({ mode: 'open' })\r\n *\r\n * isShadowRoot(shadowRoot) // -> true\r\n *\r\n * // 测试传入非 ShadowRoot 实例\r\n * isShadowRoot({}) // -> false\r\n */\r\nconst isShadowRoot = (val) => {\r\n  if (typeof ShadowRoot === 'undefined') {\r\n    return false\r\n  }\r\n\r\n  const OwnElement = getWindow(val).ShadowRoot\r\n  return val instanceof OwnElement || val instanceof ShadowRoot\r\n}\r\n\r\nexport default isShadowRoot\r\n","/**\r\n * 检测测试数据是否为 Stream 类型\r\n * ========================================================================\r\n * @method isStream\r\n * @since 2.7.0\r\n * @category Object\r\n * @param {*} val - 要检测的数据\r\n * @param {Object} [options={}] - 这是一个解构赋值的参数。它是一个对象，默认值为空对象 {}。\r\n * 对象中有一个属性 checkOpen，其默认值为 true。checkOpen 用于控制是否检查流的打开\r\n * 状态（即可读或可写状态）。\r\n * @return {Boolean} 'val' 是 Stream 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // 测试流对象\r\n * const validStream = {\r\n *   writable: true,\r\n *   pipe: () => {}\r\n * }\r\n *\r\n * isStream(validStream) // -> true\r\n *\r\n * // 测试非流对象\r\n * const nonStream = {\r\n *   notAStreamProperty: 'value'\r\n * }\r\n *\r\n * isStream(nonStream) // -> false\r\n *\r\n * // 测试 null\r\n * isStream(null) // -> false\r\n *\r\n * // 测试 checkOpen 为 false 的情况\r\n * const obj = {\r\n *   pipe: () => {}\r\n * }\r\n *\r\n * isStream(obj, { checkOpen: false }) // -> true\r\n */\r\nconst isStream = (val, { checkOpen = true } = {}) => {\r\n  return !!(\r\n    val !== null &&\r\n    typeof val === 'object' &&\r\n    (val.writable ||\r\n      val.readable ||\r\n      !checkOpen ||\r\n      (val.writable === undefined && val.readable === undefined)) &&\r\n    typeof val.pipe === 'function'\r\n  )\r\n}\r\n\r\nexport default isStream\r\n","/**\r\n * isFalsy(val) 方法用来检测测试数据是否为在布尔上下文中被视为 false 的值。\r\n * ========================================================================\r\n * @method isTruly\r\n * @since 2.8.0\r\n * @category Base\r\n * @param {*} val - 要检测的数据。\r\n * @returns {Boolean} 'val' 在布尔上下文中被视为 true 的值，返回 true，否则返回 false。\r\n * @example\r\n *\r\n * isTruly(true); // -> true\r\n * isTruly(1); // -> true\r\n * isTruly(\"hello\"); // -> true\r\n * isTruly({}); // -> true\r\n * isTruly([]); // -> true\r\n *\r\n * isTruly(false); // -> false\r\n * isTruly(0); // -> false\r\n * isTruly(''); // -> false\r\n * isTruly(null); // -> false\r\n * isTruly(undefined); // -> false\r\n * isTruly(NaN); // -> false\r\n */\r\nconst isTruly = (val) => {\r\n  return Boolean(val)\r\n}\r\n\r\nexport default isTruly\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint8Array 的数组\r\n * ========================================================================\r\n * @method isUint8Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Uint8Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isUint8Array(numbers) // -> false\r\n * isUint8Array(new Array(32)) // -> false\r\n * isUint8Array(args) // -> false\r\n * isUint8Array(new Uint8Array()) // -> true\r\n */\r\nconst isUint8Array = (val) => {\r\n  return _type(val) === TYPES.UNIT8_ARRAY\r\n}\r\n\r\nexport default isUint8Array\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint8ClampedArray 的数组\r\n * ========================================================================\r\n * @method isUint8ClampedArray\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Uint8ClampedArray 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isUint8ClampedArray(numbers) // -> false\r\n * isUint8ClampedArray(new Array(32)) // -> false\r\n * isUint8ClampedArray(args) // -> false\r\n * isUint8ClampedArray(new Uint8ClampedArray()) // -> true\r\n */\r\nconst isUint8ClampedArray = (val) => {\r\n  return _type(val) === TYPES.UNIT8_CLAMPED_ARRAY\r\n}\r\n\r\nexport default isUint8ClampedArray\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint16Array 的数组\r\n * ========================================================================\r\n * @method isUint16Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Uint16Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isUint16Array(numbers) // -> false\r\n * isUint16Array(new Array(32)) // -> false\r\n * isUint16Array(args) // -> false\r\n * isUint16Array(new Uint16Array()) // -> true\r\n */\r\nconst isUint16Array = (val) => {\r\n  return _type(val) === TYPES.UNIT16_ARRAY\r\n}\r\n\r\nexport default isUint16Array\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 Uint32Array 的数组\r\n * ========================================================================\r\n * @method isUint32Array\r\n * @since 0.2.0\r\n * @category Typed Arrays\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 Uint32Array 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const numbers = [ 2, 4 ]\r\n * let args\r\n *\r\n * function test(a){\r\n *   args = arguments\r\n *   return a === 'test'\r\n * }\r\n *\r\n * test()\r\n *\r\n * isInt32Array(numbers) // -> false\r\n * isInt32Array(new Array(32)) // -> false\r\n * isInt32Array(args) // -> false\r\n * isInt32Array(new Int32Array()) => true\r\n */\r\nconst isUint32Array = (val) => {\r\n  return _type(val) === TYPES.UNIT32_ARRAY\r\n}\r\n\r\nexport default isUint32Array\r\n","import isString from './isString'\r\nimport getURLPattern from './utils/getURLPattern'\r\n\r\n/**\r\n * 判断字符串是否为有效的 URL 地址\r\n * ========================================================================\r\n * @method isURL\r\n * @since 0.2.0\r\n * @category String\r\n * @param {*} val - 要检测的字符串\r\n * @returns {Boolean} 'val' 是有效的 URL 字符串格式，返回 true，否则返回 false\r\n * @example\r\n *\r\n * // IP 访问\r\n * isURL('http://127.0.0.1') // -> true\r\n * isURL('https://127.0.0') // -> false\r\n * isURL('https://127.0.0.') // -> false\r\n *\r\n * isURL('http://127.0.0.1:8080') // -> true\r\n * isURL('http://127.0.0.1:8080#top') // -> true\r\n * isURL('http://127.0.0.1:8080?id=22') // -> true\r\n * isURL('http://127.0.0.1/console') // -> true\r\n * isURL('http://127.0.0.1:8080/workbench/?id=2#projects') // -> true\r\n *\r\n * // 域名访问\r\n * isURL('http://localhost') -> false\r\n * isURL('ftp://www.yaohaixiao.com') -> false\r\n *\r\n * isURL('http://www.yaohaixiao.') -> false\r\n * isURL('http://www.yaohaixiao.c') -> false\r\n * isURL('http://www.yaohaixiao.c1') -> false\r\n *\r\n * isURL('https://www.yaohaixiao.cn') -> true\r\n * isURL('https://www.yaohaixiao.com') -> true\r\n * isURL('https://www.yaohaixiao.com:8083') -> true\r\n * isURL('https://www.yaohaixiao.com/blog#top') -> true\r\n * isURL('https://www.yaohaixiao.com/blog/?page=2') -> true\r\n * isURL('https://www.yaohaixiao.com:8083/blog?page=2#top') -> true\r\n */\r\nconst isURL = (val) => {\r\n  const pattern = getURLPattern()\r\n\r\n  return isString(val) && !!pattern.test(val)\r\n}\r\n\r\nexport default isURL\r\n","const getURLPattern = () => {\r\n  const protocol = '(\\\\w+:)?'\r\n  const user = '([^\\\\/\\\\?\\\\#\\\\:]+)'\r\n  const password = '(.+)'\r\n  const auth = '(' + user + ':' + password + '@)?'\r\n  const address = '(([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*(\\\\.[a-z]{2,})?)+)'\r\n  const ip = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})'\r\n  const hostname = '(' + address + '|' + ip + ')'\r\n  const port = '(\\\\:\\\\d+)?'\r\n  const host = '(' + hostname + port + ')'\r\n  const pathname = '((\\\\/[-a-z\\\\d%_.~+]*)*)'\r\n  const search = '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\r\n  const path = '(' + pathname + search + ')*'\r\n  const hash = '(\\\\#[-a-z\\\\d_]*)?'\r\n  const url = '^' + protocol + '\\\\/\\\\/' + auth + host + path + hash + '$'\r\n\r\n  return new RegExp(url, 'i')\r\n}\r\n\r\nexport default getURLPattern\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为有效的数据\r\n * =============================================================\r\n * @method isValue\r\n * @since 0.2.0\r\n * @category Base\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是有效的数据，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const fn = () => {}\r\n * let projects\r\n * function empty(){}\r\n *\r\n * // 非有效数据\r\n * isValue(projects) // -> false\r\n * isValue(NaN) // -> false\r\n * isValue(null) // -> false\r\n * isValue(Infinity) // -> false\r\n * isValue(-Infinity) // -> false\r\n *\r\n * // 有效数据\r\n * isValue(0) // -> true\r\n * isValue('') // -> true\r\n * isValue(false) // -> true\r\n * isValue([]) // -> true\r\n * isValue({}) // -> true\r\n * isValue(/\\s+/ig) // -> true\r\n * isValue(new Date()) // -> true\r\n * isValue(empty) // -> true\r\n * isValue(fn) // -> true\r\n */\r\nconst isValue = (val) => {\r\n  const type = _type(val)\r\n\r\n  switch (type) {\r\n    case TYPES.NUMBER:\r\n      return isFinite(val)\r\n    case TYPES.NULL:\r\n    case TYPES.UNDEFINED:\r\n      return false\r\n    default:\r\n      return !!type\r\n  }\r\n}\r\n\r\nexport default isValue\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 WeakMap 类型\r\n * ========================================================================\r\n * @method isWeakMap\r\n * @since 0.2.0\r\n * @cagegory Keyed Collections\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 WeakMap 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const map = new Map([\r\n *     ['name', 'Robert'],\r\n *     ['Gender', 'Male']\r\n * ])\r\n *\r\n * const weakmap = new WeakMap()\r\n *\r\n * weakmap.set({}, 37)\r\n *\r\n * is(weakmap) // -> 'weakmap'\r\n * isWeakMap(weakmap) // -> true\r\n *\r\n * is(map) // -> 'map'\r\n * isWeakMap(map) // -> false\r\n */\r\nconst isWeakMap = (val) => {\r\n  return _type(val) === TYPES.WEAK_MAP\r\n}\r\n\r\nexport default isWeakMap\r\n","import _type from './utils/_type'\r\nimport TYPES from './enum/types'\r\n\r\n/**\r\n * 检测测试数据是否为 WeakSet 类型\r\n * ========================================================================\r\n * @method isWeakSet\r\n * @since 0.2.0\r\n * @cagegory Keyed Collections\r\n * @param {*} val - 要检测的数据\r\n * @returns {Boolean} 'val' 是 WeakSet 类型，返回 true，否则返回 false\r\n * @example\r\n *\r\n * const set = new Set([1, 2, 3, 4])\r\n * const weakset = new WeakSet()\r\n *\r\n * weakset.add({name: 'Robert'})\r\n *\r\n * is(set) // -> 'set'\r\n * isSet(set) // -> true\r\n * isWeakSet(set) // -> false\r\n *\r\n * is(weakset) // -> 'weakset'\r\n * isSet(weakset) // -> false\r\n * isWeakSet(weakset) // -> true\r\n */\r\nconst isWeakSet = (val) => {\r\n  return _type(val) === TYPES.WEAK_SET\r\n}\r\n\r\nexport default isWeakSet\r\n"],"names":["TYPES","OBJECTS","_type","val","type","Object","prototype","toString","apply","_typeof","name","tagName","nodeType","isNumber","isInteger","isNaN","Number","isFloat","isFinite","isInfinite","Infinity","isString","obj","isBlank","test","isBase64","length","isChinese","str","includePunctuation","toRegExp","range","pattern","map","rangeStart","rangeEnd","hexStart","hexEnd","join","RegExp","chineseIdeographs","concat","isIDNumber","idNumber","OLD","NEW","FACTOR","PARITY","numbers","i","sum","mod","lastChar","split","parseInt","isEmail","isNull","isBuffer","Buffer","isFunction","isObject","isHTMLCollection","isTypedArray","isArray","Array","isEmptyArray","isObjectLike","isPlainObject","getPrototypeOf","proto","isUndefined","hasOwn","prop","hasOwnProperty","call","constructor","isEmptyObject","isArguments","isEmptyArguments","isEmpty","isUUID","isIPAddress","isHex","TAGS","isHTML","html","basic","full","trim","replace","slice","tag","isSVG","isJSON","_isTime","_isDate","Date","parse","isTime","isNativeFunction","isConstructor","fn","instance","Function","isPrototype","OP","Ctor","isVNode","isXML","documentElement","ownerDocument","nodeName","isArrayLike","isBigInt","bigIntValueOf","BigInt","valueOf","isBoolean","isWindow","document","location","alert","setInterval","getWindow","node","window","defaultView","isElement","Element","isFragment","isTextNode","isSymbol","symbolValueOf","Symbol","is","typeOfNumber","typeOfString","typeOfObject","isAlpha","isArrayBuffer","isArrayLikeObject","isBigInt64Array","isBigUint64Array","isBinary","buffer","charCode","charCodeAt","isDataView","isDate","isDOM","el","isError","isEven","isFalsy","isFloat32Array","isFloat64Array","isGuid","isHash","isHTMLElement","isInt8Array","isInt16Array","isInt32Array","isLength","isMap","isNil","isNode","Node","isNumeric","parseFloat","isOdd","isPhoneNumber","isPrime","boundary","Math","floor","sqrt","num","isPrimitive","isPromise","isRegExp","isSafeInteger","MAX_SAFE_INTEGER","isSet","isShadowRoot","ShadowRoot","isStream","checkOpen","writable","readable","undefined","pipe","isTruly","Boolean","isUint8Array","isUint8ClampedArray","isUint16Array","isUint32Array","isURL","isValue","isWeakMap","isWeakSet"],"mappings":"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"}